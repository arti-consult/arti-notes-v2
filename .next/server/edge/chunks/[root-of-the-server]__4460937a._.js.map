{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/utils/supabase/server.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value, ...options });\r\n          } catch (error) {\r\n            // Handle cookie setting error\r\n            console.error(\"Error setting cookie:\", error);\r\n          }\r\n        },\r\n        remove(name: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value: \"\", ...options });\r\n          } catch (error) {\r\n            // Handle cookie removal error\r\n            console.error(\"Error removing cookie:\", error);\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AAEA;AAAA;AACA;AAAA;AAHA;;;AAKO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,iLAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,yBAAyB;gBACzC;YACF;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,0BAA0B;gBAC1C;YACF;QACF;IACF;AAEJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse, type NextRequest } from \"next/server\";\r\nimport { createClient } from \"./utils/supabase/server\";\r\n\r\n// Route constants\r\nconst ROUTES = {\r\n  LOGIN: \"/login\",\r\n  SIGNUP: \"/sign-up\",\r\n  PAYMENT: \"/payment\",\r\n  ONBOARDING: \"/onboarding\",\r\n  DASHBOARD: \"/dashboard\",\r\n} as const;\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  try {\r\n    const currentPath = request.nextUrl.pathname;\r\n\r\n    console.log(\"=== MIDDLEWARE START ===\", {\r\n      pathname: currentPath,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // Skip middleware for static files, API routes, and auth callback\r\n    if (\r\n      currentPath.startsWith(\"/_next\") ||\r\n      currentPath.startsWith(\"/api\") ||\r\n      currentPath.startsWith(\"/auth/callback\") ||\r\n      currentPath === \"/session-debug\" || // Allow session debug page\r\n      currentPath.includes(\".\")\r\n    ) {\r\n      console.log(\"Skipping middleware for:\", currentPath);\r\n      return NextResponse.next();\r\n    }\r\n\r\n    const response = NextResponse.next({\r\n      request: {\r\n        headers: request.headers,\r\n      },\r\n    });\r\n\r\n    // Initialize Supabase client\r\n    const supabase = await createClient();\r\n\r\n    const {\r\n      data: { user },\r\n      error: userError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    console.log(\"=== USER CHECK ===\", {\r\n      hasUser: !!user,\r\n      userId: user?.id,\r\n      userEmail: user?.email,\r\n      emailConfirmed: user?.email_confirmed_at,\r\n      userError: userError?.message,\r\n    });\r\n\r\n    // Define route categories\r\n    const isAuthRoute = [\r\n      ROUTES.LOGIN,\r\n      ROUTES.SIGNUP,\r\n      ROUTES.PAYMENT,\r\n      ROUTES.ONBOARDING,\r\n    ].includes(currentPath as any);\r\n    const isDashboard = currentPath.startsWith(ROUTES.DASHBOARD);\r\n    const isHomePage = currentPath === \"/\";\r\n\r\n    // No user - redirect to signup (except if already on auth routes)\r\n    if (!user) {\r\n      if (isDashboard || isHomePage) {\r\n        console.log(\"No user, redirecting to signup\");\r\n        return NextResponse.redirect(new URL(ROUTES.SIGNUP, request.url));\r\n      }\r\n      console.log(\"No user, but on auth route - allowing\");\r\n      return response;\r\n    }\r\n\r\n    // User exists but email not confirmed (shouldn't happen with disabled confirmation, but just in case)\r\n    if (!user.email_confirmed_at) {\r\n      console.log(\"User email not confirmed\");\r\n      if (isDashboard) {\r\n        return NextResponse.redirect(new URL(ROUTES.SIGNUP, request.url));\r\n      }\r\n      return response;\r\n    }\r\n\r\n    // User exists and email confirmed - check onboarding status\r\n    console.log(\"=== CHECKING ONBOARDING STATUS ===\");\r\n\r\n    const { data: onboardingData, error: onboardingError } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, completed_at\")\r\n      .eq(\"user_id\", user.id)\r\n      .maybeSingle();\r\n\r\n    if (onboardingError && onboardingError.code !== \"PGRST116\") {\r\n      console.error(\"Error fetching onboarding data:\", onboardingError);\r\n    }\r\n\r\n    const hasCompletedPayment = onboardingData?.payment_completed || false;\r\n    const hasCompletedOnboarding =\r\n      onboardingData?.completed_at !== null && onboardingData !== null;\r\n\r\n    console.log(\"=== USER STATUS ===\", {\r\n      hasCompletedPayment,\r\n      hasCompletedOnboarding,\r\n      currentPath,\r\n      onboardingData,\r\n    });\r\n\r\n    // CRITICAL: Prevent redirect loops by being very specific about when to redirect\r\n\r\n    if (hasCompletedPayment && hasCompletedOnboarding) {\r\n      // User is fully complete - only redirect auth routes to dashboard\r\n      if (isAuthRoute) {\r\n        console.log(\"Complete user on auth route, redirecting to dashboard\");\r\n        return NextResponse.redirect(new URL(ROUTES.DASHBOARD, request.url));\r\n      }\r\n    } else if (hasCompletedPayment && !hasCompletedOnboarding) {\r\n      // Payment complete, needs onboarding - only redirect if NOT on onboarding page\r\n      if (currentPath !== ROUTES.ONBOARDING) {\r\n        console.log(\"Payment complete, redirecting to onboarding\");\r\n        return NextResponse.redirect(new URL(ROUTES.ONBOARDING, request.url));\r\n      }\r\n    } else {\r\n      // No payment completed yet - redirect to payment BUT...\r\n      // IMPORTANT: Don't redirect if already on payment page or signup/login pages\r\n      if (\r\n        currentPath !== ROUTES.PAYMENT &&\r\n        currentPath !== ROUTES.LOGIN &&\r\n        currentPath !== ROUTES.SIGNUP\r\n      ) {\r\n        console.log(\"No payment, redirecting to payment\");\r\n        return NextResponse.redirect(new URL(ROUTES.PAYMENT, request.url));\r\n      }\r\n\r\n      // Special case: if user is on signup page but they already exist, redirect to payment\r\n      if (currentPath === ROUTES.SIGNUP) {\r\n        console.log(\"Existing user on signup page, redirecting to payment\");\r\n        return NextResponse.redirect(new URL(ROUTES.PAYMENT, request.url));\r\n      }\r\n    }\r\n\r\n    console.log(\"=== MIDDLEWARE END - NO REDIRECT ===\");\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"=== MIDDLEWARE ERROR ===\", error);\r\n    return NextResponse.next();\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\r\n  ],\r\n};\r\n"],"names":[],"mappings":"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"}}]
}