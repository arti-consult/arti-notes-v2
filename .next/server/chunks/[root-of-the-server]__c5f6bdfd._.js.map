{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/utils/supabase/server.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value, ...options });\r\n          } catch (error) {\r\n            // Handle cookie setting error\r\n            console.error(\"Error setting cookie:\", error);\r\n          }\r\n        },\r\n        remove(name: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value: \"\", ...options });\r\n          } catch (error) {\r\n            // Handle cookie removal error\r\n            console.error(\"Error removing cookie:\", error);\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;;;;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,yBAAyB;gBACzC;YACF;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,0BAA0B;gBAC1C;YACF;QACF;IACF;AAEJ;;;IA9BsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/api/stripe/success/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\nimport Stripe from \"stripe\";\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: \"2025-04-30.basil\",\r\n});\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log(\"🎉 Stripe success callback received\");\r\n\r\n    const supabase = await createClient();\r\n    const url = new URL(request.url);\r\n\r\n    // Get Stripe session ID from URL\r\n    const sessionId = url.searchParams.get(\"session_id\");\r\n    console.log(\"Stripe session ID:\", sessionId);\r\n\r\n    if (!sessionId) {\r\n      return NextResponse.redirect(\r\n        new URL(\"/error?message=Missing session ID\", request.url)\r\n      );\r\n    }\r\n\r\n    // Fetch the Stripe session to get the customer ID\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\r\n    const stripeCustomerId = session.customer?.toString();\r\n\r\n    if (!stripeCustomerId) {\r\n      console.error(\"❌ Stripe customer ID not found in session\");\r\n    } else {\r\n      console.log(\"💡 Stripe customer ID:\", stripeCustomerId);\r\n    }\r\n\r\n    // Get the current Supabase user\r\n    const {\r\n      data: { user },\r\n      error: userError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (userError || !user) {\r\n      console.error(\"❌ User not authenticated:\", userError);\r\n      return NextResponse.redirect(\r\n        new URL(\r\n          \"/login?error=Authentication required after payment\",\r\n          request.url\r\n        )\r\n      );\r\n    }\r\n\r\n    console.log(\"💳 Processing payment success for user:\", user.id);\r\n\r\n    // Optionally update profiles table with Stripe customer ID\r\n    if (stripeCustomerId) {\r\n      const { error: profileUpdateError } = await supabase\r\n        .from(\"profiles\")\r\n        .update({ stripe_customer_id: stripeCustomerId })\r\n        .eq(\"id\", user.id); // Adjust if your profiles table uses a different key\r\n\r\n      if (profileUpdateError) {\r\n        console.error(\r\n          \"❌ Failed to update Stripe customer ID in profiles:\",\r\n          profileUpdateError\r\n        );\r\n      } else {\r\n        console.log(\"✅ Stripe customer ID saved to profiles table\");\r\n      }\r\n    }\r\n\r\n    // Check current onboarding status\r\n    const { data: currentOnboarding, error: fetchError } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      console.error(\"❌ Error fetching onboarding:\", fetchError);\r\n\r\n      // If no onboarding exists, create one\r\n      if (fetchError.code === \"PGRST116\") {\r\n        const { error: createError } = await supabase\r\n          .from(\"user_onboarding\")\r\n          .insert({\r\n            user_id: user.id,\r\n            payment_completed: true,\r\n            payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n            stripe_session_id: sessionId,\r\n            user_type: null,\r\n            team_size: null,\r\n            referral_source: null,\r\n            audio_purpose: null,\r\n            mic_permission: false,\r\n            completed_at: null,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString(),\r\n          });\r\n\r\n        if (createError) {\r\n          console.error(\"❌ Error creating onboarding:\", createError);\r\n          return NextResponse.redirect(\r\n            new URL(\"/error?message=Failed to create user record\", request.url)\r\n          );\r\n        }\r\n\r\n        console.log(\"✅ New onboarding record created with payment completed\");\r\n      } else {\r\n        return NextResponse.redirect(\r\n          new URL(\"/error?message=Database error\", request.url)\r\n        );\r\n      }\r\n    } else {\r\n      // Update existing onboarding record\r\n      const { error: updateError } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update({\r\n          payment_completed: true,\r\n          updated_at: new Date().toISOString(),\r\n          ...(sessionId && { stripe_session_id: sessionId }),\r\n        })\r\n        .eq(\"user_id\", user.id);\r\n\r\n      if (updateError) {\r\n        console.error(\"🚨 Error updating payment status:\", updateError);\r\n        return NextResponse.redirect(\r\n          new URL(\"/error?message=Failed to update payment status\", request.url)\r\n        );\r\n      }\r\n\r\n      console.log(\"✅ Payment status updated successfully\");\r\n    }\r\n\r\n    // Re-fetch onboarding to determine redirect\r\n    const { data: updatedOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const hasOnboardingAnswers = !!(\r\n      updatedOnboarding?.user_type && updatedOnboarding?.referral_source\r\n    );\r\n    const hasCompletedOnboarding = updatedOnboarding?.completed_at !== null;\r\n\r\n    let redirectPath = \"/onboarding\";\r\n\r\n    if (hasOnboardingAnswers && !hasCompletedOnboarding) {\r\n      redirectPath = \"/onboarding/connect-account\";\r\n    } else if (hasCompletedOnboarding) {\r\n      redirectPath = \"/dashboard\";\r\n    }\r\n\r\n    console.log(\"🔄 Final redirect path:\", redirectPath);\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    return NextResponse.redirect(new URL(redirectPath, request.url));\r\n  } catch (error) {\r\n    console.error(\"🚨 Error in Stripe success handler:\", error);\r\n    return NextResponse.redirect(\r\n      new URL(\"/error?message=Payment processing error\", request.url)\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}