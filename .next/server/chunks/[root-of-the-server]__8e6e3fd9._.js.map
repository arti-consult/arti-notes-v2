{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n  )\r\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,4KAAA,CAAA,sBAAmB,AAAD;AAI3B","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: any) {\r\n          cookieStore.set({ name, value: \"\", ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/calendar/google-calendar.ts"],"sourcesContent":["// src/utils/calendar/google-calendar.ts\nimport { google } from \"googleapis\";\nimport { createClient as createClientClient } from \"@/utils/supabase/client\";\nimport { createClient as createClientServer } from \"@/utils/supabase/server\";\n\n// Google OAuth scopes needed\nconst SCOPES = [\n  \"https://www.googleapis.com/auth/calendar.readonly\",\n  \"https://www.googleapis.com/auth/calendar.events.readonly\",\n];\n\n// Google Calendar API credentials\nconst credentials = {\n  client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID as string,\n  client_secret: process.env.GOOGLE_CLIENT_SECRET as string,\n  redirect_uri: `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/google/callback`,\n};\n\n// Debug log the credentials and environment\nconsole.log(\"Environment check:\", {\n  NODE_ENV: process.env.NODE_ENV,\n  APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n  hasClientId: !!process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,\n  hasClientSecret: !!process.env.GOOGLE_CLIENT_SECRET,\n});\n\nconsole.log(\"Google OAuth Configuration:\", {\n  redirectUri: credentials.redirect_uri,\n  hasClientId: !!credentials.client_id,\n  hasClientSecret: !!credentials.client_secret,\n  scopes: SCOPES,\n});\n\n/**\n * Create OAuth2 client for Google API\n */\nexport function createOAuth2Client() {\n  const client = new google.auth.OAuth2(\n    credentials.client_id,\n    credentials.client_secret,\n    credentials.redirect_uri\n  );\n\n  console.log(\n    \"Created OAuth2 client with redirect URI:\",\n    credentials.redirect_uri\n  );\n\n  return client;\n}\n\n/**\n * Generate Google OAuth URL for user authorization\n */\nexport function getGoogleAuthUrl(): string {\n  console.log(\"Generating Google OAuth URL...\");\n  const oauth2Client = createOAuth2Client();\n\n  const url = oauth2Client.generateAuthUrl({\n    access_type: \"offline\",\n    scope: SCOPES,\n    prompt: \"consent\", // Force to get refresh token\n    include_granted_scopes: true,\n  });\n\n  console.log(\"Generated OAuth URL:\", url);\n  return url;\n}\n\n/**\n * Exchange authorization code for tokens and save to Supabase\n */\nexport async function handleGoogleCallback(code: string): Promise<boolean> {\n  try {\n    const supabase = await createClientServer();\n    const oauth2Client = createOAuth2Client();\n\n    // Exchange code for tokens\n    const { tokens } = await oauth2Client.getToken(code);\n\n    // Get current user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      console.error(\"User not authenticated\");\n      return false;\n    }\n\n    console.log(\"Saving Google Calendar connection...\");\n\n    // Store tokens in Supabase calendar_connections table\n    const { error } = await supabase.from(\"calendar_connections\").upsert(\n      {\n        user_id: user.id,\n        provider: \"google\",\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token,\n        token_expiry: tokens.expiry_date\n          ? new Date(tokens.expiry_date).toISOString()\n          : null,\n        scope: SCOPES.join(\" \"),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      },\n      {\n        onConflict: \"user_id,provider\",\n      }\n    );\n\n    if (error) {\n      console.error(\"Error storing tokens:\", error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error handling Google callback:\", error);\n    return false;\n  }\n}\n\n/**\n * Refresh tokens if needed\n */\nexport async function refreshTokenIfNeeded(userId: string): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    // Get stored tokens from calendar_connections\n    const { data, error } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    if (error || !data) {\n      console.error(\"No Google Calendar connection found\");\n      return false;\n    }\n\n    // Check if token is expired\n    const tokenExpiry = new Date(data.token_expiry);\n    const now = new Date();\n\n    if (tokenExpiry <= now && data.refresh_token) {\n      console.log(\"Refreshing expired token...\");\n\n      // Token is expired, refresh it\n      const oauth2Client = createOAuth2Client();\n      oauth2Client.setCredentials({\n        refresh_token: data.refresh_token,\n      });\n\n      const response = await oauth2Client.getAccessToken();\n      const token = response.token;\n      const expiryDate = oauth2Client.credentials.expiry_date;\n\n      // Update tokens in database\n      const { error: updateError } = await supabase\n        .from(\"calendar_connections\")\n        .update({\n          access_token: token,\n          token_expiry: expiryDate ? new Date(expiryDate).toISOString() : null,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"user_id\", userId)\n        .eq(\"provider\", \"google\");\n\n      if (updateError) {\n        console.error(\"Error updating tokens:\", updateError);\n        return false;\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error refreshing token:\", error);\n    return false;\n  }\n}\n\ninterface CalendarEvent {\n  id: string;\n  calendar_id: string;\n  title: string;\n  description: string | null;\n  start_time: string;\n  end_time: string;\n  location: string | null;\n  meeting_link: string | null;\n  attendees: { email: string; name?: string }[];\n  is_organizer: boolean;\n  status: \"confirmed\" | \"tentative\" | \"cancelled\";\n  html_link: string;\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Fetch upcoming calendar events from Google Calendar\n */\nexport async function fetchUpcomingGoogleEvents(\n  userId: string,\n  daysAhead = 30\n): Promise<CalendarEvent[]> {\n  try {\n    console.log(`Fetching Google Calendar events for user ${userId}...`);\n    const supabase = createClientClient();\n\n    // Get stored tokens\n    const { data: connectionData, error: connectionError } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    if (connectionError || !connectionData) {\n      console.error(\"No Google Calendar connection found:\", connectionError);\n      return [];\n    }\n\n    console.log(\"Found Google Calendar connection:\", {\n      connectionId: connectionData.id,\n      tokenExpiry: connectionData.token_expiry,\n    });\n\n    // Refresh token if needed\n    console.log(\"Checking if token needs refresh...\");\n    await refreshTokenIfNeeded(userId);\n\n    // Setup OAuth client with token\n    console.log(\"Setting up OAuth client...\");\n    const oauth2Client = createOAuth2Client();\n    oauth2Client.setCredentials({\n      access_token: connectionData.access_token,\n      refresh_token: connectionData.refresh_token,\n    });\n\n    const calendar = google.calendar({ version: \"v3\", auth: oauth2Client });\n\n    // Calculate time range\n    const now = new Date();\n    const timeMin = now.toISOString();\n    const future = new Date();\n    future.setDate(future.getDate() + daysAhead);\n    const timeMax = future.toISOString();\n\n    console.log(`Fetching events from ${timeMin} to ${timeMax}`);\n\n    // Fetch calendar list first\n    console.log(\"Fetching calendar list...\");\n    const {\n      data: { items: calendarList },\n    } = await calendar.calendarList.list();\n\n    if (!calendarList || calendarList.length === 0) {\n      console.log(\"No calendars found\");\n      return [];\n    }\n\n    console.log(`Found ${calendarList.length} calendars`);\n\n    // Fetch events from each calendar\n    const allEvents: CalendarEvent[] = [];\n\n    for (const cal of calendarList) {\n      if (!cal.id) continue;\n\n      console.log(`Fetching events for calendar: ${cal.summary}`);\n\n      const response = await calendar.events.list({\n        calendarId: cal.id,\n        timeMin,\n        timeMax,\n        singleEvents: true,\n        orderBy: \"startTime\",\n      });\n\n      const events = response.data.items || [];\n\n      if (events.length === 0) {\n        console.log(`No events found for calendar ${cal.summary}`);\n        continue;\n      }\n\n      console.log(`Found ${events.length} events for calendar ${cal.summary}`);\n\n      for (const event of events) {\n        if (!event.id || !event.summary) continue;\n\n        // Get meeting link\n        let meetingLink: string | null = null;\n        if (event.hangoutLink) {\n          meetingLink = event.hangoutLink;\n        } else if (event.conferenceData?.entryPoints) {\n          const videoEntry = event.conferenceData.entryPoints.find(\n            (entry) => entry.entryPointType === \"video\"\n          );\n          if (videoEntry?.uri) {\n            meetingLink = videoEntry.uri;\n          }\n        }\n\n        // Get attendees\n        const attendees =\n          event.attendees?.map((attendee) => ({\n            email: attendee.email || \"\",\n            name: attendee.displayName || undefined,\n          })) || [];\n\n        // Check if user is organizer\n        const isOrganizer = event.organizer?.email === connectionData.email;\n\n        // Format dates correctly\n        const startTime =\n          event.start?.dateTime ||\n          (event.start?.date ? `${event.start.date}T00:00:00` : null);\n        const endTime =\n          event.end?.dateTime ||\n          (event.end?.date ? `${event.end.date}T23:59:59` : null);\n\n        if (!startTime || !endTime) continue;\n\n        allEvents.push({\n          id: event.id,\n          calendar_id: cal.id,\n          title: event.summary,\n          description: event.description || null,\n          start_time: startTime,\n          end_time: endTime,\n          location: event.location || null,\n          meeting_link: meetingLink,\n          attendees,\n          is_organizer: isOrganizer,\n          status:\n            (event.status as \"confirmed\" | \"tentative\" | \"cancelled\") ||\n            \"confirmed\",\n          html_link: event.htmlLink || \"\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        });\n      }\n    }\n\n    console.log(`Total events found: ${allEvents.length}`);\n    return allEvents.sort(\n      (a, b) =>\n        new Date(a.start_time).getTime() - new Date(b.start_time).getTime()\n    );\n  } catch (error) {\n    console.error(\"Error fetching Google Calendar events:\", error);\n    return [];\n  }\n}\n\n/**\n * Store calendar events in Supabase\n */\nexport async function storeCalendarEvents(\n  userId: string,\n  events: CalendarEvent[]\n): Promise<boolean> {\n  try {\n    console.log(`Storing ${events.length} calendar events in Supabase...`);\n\n    if (events.length === 0) {\n      console.log(\"No events to store\");\n      return true;\n    }\n\n    const supabase = createClientClient();\n\n    // Format events for insertion\n    const formattedEvents = events.map((event) => ({\n      user_id: userId,\n      provider: \"google\",\n      external_event_id: event.id,\n      calendar_id: event.calendar_id,\n      title: event.title,\n      description: event.description,\n      start_time: event.start_time,\n      end_time: event.end_time,\n      location: event.location,\n      meeting_link: event.meeting_link,\n      attendees: event.attendees,\n      is_organizer: event.is_organizer,\n      status: event.status,\n      html_link: event.html_link,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }));\n\n    console.log(\"Upserting events to Supabase...\");\n\n    // Upsert events to handle both new and updated events\n    const { error } = await supabase\n      .from(\"calendar_events\")\n      .upsert(formattedEvents, {\n        onConflict: \"user_id,provider,external_event_id\",\n      });\n\n    if (error) {\n      console.error(\"Error storing calendar events:\", error);\n      return false;\n    }\n\n    console.log(\"Events stored successfully\");\n\n    // Update last sync timestamp\n    console.log(\"Updating last sync timestamp...\");\n    const { error: profileError } = await supabase\n      .from(\"profiles\")\n      .update({\n        last_calendar_sync: new Date().toISOString(),\n      })\n      .eq(\"id\", userId);\n\n    if (profileError) {\n      console.error(\"Error updating last sync timestamp:\", profileError);\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error storing calendar events:\", error);\n    return false;\n  }\n}\n\n/**\n * Sync Google Calendar events to Supabase\n */\nexport async function syncGoogleCalendarEvents(\n  userId: string,\n  daysAhead = 30\n): Promise<boolean> {\n  try {\n    console.log(`Starting calendar sync for user ${userId}...`);\n\n    // Refresh token if needed\n    const tokenRefreshed = await refreshTokenIfNeeded(userId);\n    if (!tokenRefreshed) {\n      console.error(\"Failed to refresh token\");\n      return false;\n    }\n\n    // Fetch events from Google Calendar\n    const events = await fetchUpcomingGoogleEvents(userId, daysAhead);\n\n    if (events.length === 0) {\n      console.log(\"No events to sync\");\n      return true;\n    }\n\n    console.log(`Found ${events.length} events to sync`);\n\n    // Store events in Supabase\n    return await storeCalendarEvents(userId, events);\n  } catch (error) {\n    console.error(\"Error syncing Google Calendar events:\", error);\n    return false;\n  }\n}\n\n/**\n * Check if user has connected their Google Calendar\n */\nexport async function isGoogleCalendarConnected(\n  userId: string\n): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    const { data, error } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"id\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    return !error && !!data;\n  } catch (error) {\n    console.error(\"Error checking Google Calendar connection:\", error);\n    return false;\n  }\n}\n\n/**\n * Disconnect Google Calendar integration\n */\nexport async function disconnectGoogleCalendar(\n  userId: string\n): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    // Delete connection record\n    const { error } = await supabase\n      .from(\"calendar_connections\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\");\n\n    if (error) {\n      console.error(\"Error disconnecting Google Calendar:\", error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error disconnecting Google Calendar:\", error);\n    return false;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/api/auth/google/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getGoogleAuthUrl } from '@/utils/calendar/google-calendar';\r\nimport { createClient } from '@/utils/supabase/server';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('Starting Google OAuth flow...');\r\n    \r\n    const supabase = await createClient();\r\n    \r\n    // Verify user is authenticated\r\n    const { data: { user }, error } = await supabase.auth.getUser();\r\n    \r\n    if (error) {\r\n      console.error('Supabase auth error:', error);\r\n      return NextResponse.json(\r\n        { error: 'Authentication required' },\r\n        { \r\n          status: 401,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    if (!user) {\r\n      console.error('No user found in session');\r\n      return NextResponse.json(\r\n        { error: 'Authentication required' },\r\n        { \r\n          status: 401,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    console.log('User authenticated:', { userId: user.id, email: user.email });\r\n    \r\n    // Generate Google OAuth URL\r\n    const authUrl = getGoogleAuthUrl();\r\n    console.log('Generated OAuth URL:', authUrl);\r\n    \r\n    return NextResponse.json(\r\n      { url: authUrl },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.error('Error in Google auth route:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to generate Google auth URL', details: error instanceof Error ? error.message : String(error) },\r\n      { \r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      }\r\n    );\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAElC,+BAA+B;QAC/B,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;QAEJ;QAEA,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBACE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;YACF;QAEJ;QAEA,QAAQ,GAAG,CAAC,uBAAuB;YAAE,QAAQ,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC;QAExE,4BAA4B;QAC5B,MAAM,UAAU,CAAA,GAAA,gJAAA,CAAA,mBAAgB,AAAD;QAC/B,QAAQ,GAAG,CAAC,wBAAwB;QAEpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,KAAK;QAAQ,GACf;YACE,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAsC,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QAAO,GAC/G;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ;AACF","debugId":null}}]
}