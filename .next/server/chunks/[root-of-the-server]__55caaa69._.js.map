{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/supabase/client.ts"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\r\n  )\r\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAEO,SAAS;IACd,OAAO,CAAA,GAAA,4KAAA,CAAA,sBAAmB,AAAD;AAI3B","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          cookieStore.set({ name, value, ...options });\r\n        },\r\n        remove(name: string, options: any) {\r\n          cookieStore.set({ name, value: \"\", ...options });\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/calendar/auth.ts"],"sourcesContent":["import { google } from \"googleapis\";\r\nimport { OAuth2Client } from \"google-auth-library\";\r\nimport { createClient } from \"@/utils/supabase/client\";\r\n\r\nconst GOOGLE_CLIENT_ID = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!;\r\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!;\r\nconst GOOGLE_REDIRECT_URI = process.env.NEXT_PUBLIC_GOOGLE_REDIRECT_URI!;\r\n\r\nexport async function getGoogleAccessToken(\r\n  userId: string\r\n): Promise<string | null> {\r\n  try {\r\n    console.log(\"Getting Google access token for user:\", userId);\r\n    const supabase = createClient();\r\n\r\n    // Get the user's calendar connection\r\n    const { data: connection, error } = await supabase\r\n      .from(\"calendar_connections\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", userId)\r\n      .eq(\"provider\", \"google\")\r\n      .single();\r\n\r\n    if (error || !connection) {\r\n      console.error(\"Failed to get calendar connection:\", error);\r\n      return null;\r\n    }\r\n\r\n    console.log(\"Found calendar connection:\", {\r\n      connectionId: connection.id,\r\n      hasRefreshToken: !!connection.refresh_token,\r\n      tokenExpiry: connection.token_expiry,\r\n    });\r\n\r\n    // Create OAuth2 client\r\n    const oauth2Client = new OAuth2Client(\r\n      GOOGLE_CLIENT_ID,\r\n      GOOGLE_CLIENT_SECRET,\r\n      GOOGLE_REDIRECT_URI\r\n    );\r\n\r\n    // Set the refresh token\r\n    oauth2Client.setCredentials({\r\n      refresh_token: connection.refresh_token,\r\n    });\r\n\r\n    // Get fresh access token using refresh token\r\n    const response = await oauth2Client.getAccessToken();\r\n\r\n    if (!response.token) {\r\n      console.error(\"Failed to get access token\");\r\n      return null;\r\n    }\r\n\r\n    // Update the stored tokens\r\n    const { error: updateError } = await supabase\r\n      .from(\"calendar_connections\")\r\n      .update({\r\n        access_token: response.token,\r\n        token_expiry: response.res?.data?.expiry_date\r\n          ? new Date(response.res.data.expiry_date).toISOString()\r\n          : null,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq(\"id\", connection.id);\r\n\r\n    if (updateError) {\r\n      console.error(\"Failed to update tokens:\", updateError);\r\n    } else {\r\n      console.log(\"Successfully updated tokens\");\r\n    }\r\n\r\n    return response.token;\r\n  } catch (error) {\r\n    console.error(\"Error getting Google access token:\", error);\r\n    return null;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AACA;AACA;;;AAEA,MAAM;AACN,MAAM,uBAAuB,QAAQ,GAAG,CAAC,oBAAoB;AAC7D,MAAM,sBAAsB,QAAQ,GAAG,CAAC,+BAA+B;AAEhE,eAAe,qBACpB,MAAc;IAEd,IAAI;QACF,QAAQ,GAAG,CAAC,yCAAyC;QACrD,MAAM,WAAW,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAE5B,qCAAqC;QACrC,MAAM,EAAE,MAAM,UAAU,EAAE,KAAK,EAAE,GAAG,MAAM,SACvC,IAAI,CAAC,wBACL,MAAM,CAAC,KACP,EAAE,CAAC,WAAW,QACd,EAAE,CAAC,YAAY,UACf,MAAM;QAET,IAAI,SAAS,CAAC,YAAY;YACxB,QAAQ,KAAK,CAAC,sCAAsC;YACpD,OAAO;QACT;QAEA,QAAQ,GAAG,CAAC,8BAA8B;YACxC,cAAc,WAAW,EAAE;YAC3B,iBAAiB,CAAC,CAAC,WAAW,aAAa;YAC3C,aAAa,WAAW,YAAY;QACtC;QAEA,uBAAuB;QACvB,MAAM,eAAe,IAAI,oKAAA,CAAA,eAAY,CACnC,kBACA,sBACA;QAGF,wBAAwB;QACxB,aAAa,cAAc,CAAC;YAC1B,eAAe,WAAW,aAAa;QACzC;QAEA,6CAA6C;QAC7C,MAAM,WAAW,MAAM,aAAa,cAAc;QAElD,IAAI,CAAC,SAAS,KAAK,EAAE;YACnB,QAAQ,KAAK,CAAC;YACd,OAAO;QACT;QAEA,2BAA2B;QAC3B,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,wBACL,MAAM,CAAC;YACN,cAAc,SAAS,KAAK;YAC5B,cAAc,SAAS,GAAG,EAAE,MAAM,cAC9B,IAAI,KAAK,SAAS,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,KACnD;YACJ,YAAY,IAAI,OAAO,WAAW;QACpC,GACC,EAAE,CAAC,MAAM,WAAW,EAAE;QAEzB,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,4BAA4B;QAC5C,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;QAEA,OAAO,SAAS,KAAK;IACvB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/calendar/google-calendar.ts"],"sourcesContent":["// src/utils/calendar/google-calendar.ts\nimport { google } from \"googleapis\";\nimport { createClient as createClientClient } from \"@/utils/supabase/client\";\nimport { createClient as createClientServer } from \"@/utils/supabase/server\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { CalendarEvent } from \"@/types/calendar\";\nimport { getGoogleAccessToken } from \"./auth\";\n\n// Google OAuth scopes needed\nconst SCOPES = [\n  \"https://www.googleapis.com/auth/calendar.readonly\",\n  \"https://www.googleapis.com/auth/calendar.events.readonly\",\n];\n\n// Google Calendar API credentials\nconst credentials = {\n  client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID as string,\n  client_secret: process.env.GOOGLE_CLIENT_SECRET as string,\n  redirect_uri: `${process.env.NEXT_PUBLIC_APP_URL}/api/auth/google/callback`,\n};\n\n// Debug log the credentials and environment\nconsole.log(\"Environment check:\", {\n  NODE_ENV: process.env.NODE_ENV,\n  APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n  hasClientId: !!process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID,\n  hasClientSecret: !!process.env.GOOGLE_CLIENT_SECRET,\n});\n\nconsole.log(\"Google OAuth Configuration:\", {\n  redirectUri: credentials.redirect_uri,\n  hasClientId: !!credentials.client_id,\n  hasClientSecret: !!credentials.client_secret,\n  scopes: SCOPES,\n});\n\n/**\n * Create OAuth2 client for Google API\n */\nexport function createOAuth2Client() {\n  const client = new google.auth.OAuth2(\n    credentials.client_id,\n    credentials.client_secret,\n    credentials.redirect_uri\n  );\n\n  console.log(\n    \"Created OAuth2 client with redirect URI:\",\n    credentials.redirect_uri\n  );\n\n  return client;\n}\n\n/**\n * Generate Google OAuth URL for user authorization\n */\nexport function getGoogleAuthUrl(): string {\n  console.log(\"Generating Google OAuth URL...\");\n  const oauth2Client = createOAuth2Client();\n\n  const url = oauth2Client.generateAuthUrl({\n    access_type: \"offline\",\n    scope: SCOPES,\n    prompt: \"consent\", // Force to get refresh token\n    include_granted_scopes: true,\n  });\n\n  console.log(\"Generated OAuth URL:\", url);\n  return url;\n}\n\n/**\n * Exchange authorization code for tokens and save to Supabase\n */\nexport async function handleGoogleCallback(code: string): Promise<boolean> {\n  try {\n    const supabase = await createClientServer();\n    const oauth2Client = createOAuth2Client();\n\n    // Exchange code for tokens\n    const { tokens } = await oauth2Client.getToken(code);\n\n    // Get current user\n    const {\n      data: { user },\n      error: userError,\n    } = await supabase.auth.getUser();\n\n    if (userError || !user) {\n      console.error(\"User not authenticated\");\n      return false;\n    }\n\n    console.log(\"Saving Google Calendar connection...\");\n\n    // Store tokens in Supabase calendar_connections table\n    const { error } = await supabase.from(\"calendar_connections\").upsert(\n      {\n        user_id: user.id,\n        provider: \"google\",\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token,\n        token_expiry: tokens.expiry_date\n          ? new Date(tokens.expiry_date).toISOString()\n          : null,\n        scope: SCOPES.join(\" \"),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      },\n      {\n        onConflict: \"user_id,provider\",\n      }\n    );\n\n    if (error) {\n      console.error(\"Error storing tokens:\", error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error handling Google callback:\", error);\n    return false;\n  }\n}\n\n/**\n * Refresh tokens if needed\n */\nexport async function refreshTokenIfNeeded(userId: string): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    // Get stored tokens from calendar_connections\n    const { data, error } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    if (error || !data) {\n      console.error(\"No Google Calendar connection found\");\n      return false;\n    }\n\n    // Check if token is expired\n    const tokenExpiry = new Date(data.token_expiry);\n    const now = new Date();\n\n    if (tokenExpiry <= now && data.refresh_token) {\n      console.log(\"Refreshing expired token...\");\n\n      // Token is expired, refresh it\n      const oauth2Client = createOAuth2Client();\n      oauth2Client.setCredentials({\n        refresh_token: data.refresh_token,\n      });\n\n      const response = await oauth2Client.getAccessToken();\n      const token = response.token;\n      const expiryDate = oauth2Client.credentials.expiry_date;\n\n      // Update tokens in database\n      const { error: updateError } = await supabase\n        .from(\"calendar_connections\")\n        .update({\n          access_token: token,\n          token_expiry: expiryDate ? new Date(expiryDate).toISOString() : null,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"user_id\", userId)\n        .eq(\"provider\", \"google\");\n\n      if (updateError) {\n        console.error(\"Error updating tokens:\", updateError);\n        return false;\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error refreshing token:\", error);\n    return false;\n  }\n}\n\n/**\n * Fetch upcoming calendar events from Google Calendar\n */\nexport async function fetchUpcomingGoogleEvents(\n  userId: string,\n  daysAhead = 30\n): Promise<CalendarEvent[]> {\n  try {\n    console.log(`Fetching Google Calendar events for user ${userId}...`);\n\n    // Get access token\n    const accessToken = await getGoogleAccessToken(userId);\n    if (!accessToken) {\n      console.error(\"Failed to get access token\");\n      return [];\n    }\n\n    // Setup OAuth client with token\n    console.log(\"Setting up OAuth client...\");\n    const oauth2Client = new google.auth.OAuth2(\n      credentials.client_id,\n      credentials.client_secret,\n      credentials.redirect_uri\n    );\n    oauth2Client.setCredentials({ access_token: accessToken });\n\n    const calendar = google.calendar({ version: \"v3\", auth: oauth2Client });\n\n    // Calculate time range\n    const now = new Date();\n    const timeMin = now.toISOString();\n    const future = new Date();\n    future.setDate(future.getDate() + daysAhead);\n    const timeMax = future.toISOString();\n\n    console.log(`Fetching events from ${timeMin} to ${timeMax}`);\n\n    // Fetch calendar list first\n    console.log(\"Fetching calendar list...\");\n    const {\n      data: { items: calendarList },\n    } = await calendar.calendarList.list();\n\n    if (!calendarList || calendarList.length === 0) {\n      console.log(\"No calendars found\");\n      return [];\n    }\n\n    console.log(`Found ${calendarList.length} calendars`);\n\n    // Fetch events from each calendar\n    const allEvents: CalendarEvent[] = [];\n\n    for (const cal of calendarList) {\n      if (!cal.id) continue;\n\n      console.log(`Fetching events for calendar: ${cal.summary}`);\n\n      const response = await calendar.events.list({\n        calendarId: cal.id,\n        timeMin,\n        timeMax,\n        singleEvents: true,\n        orderBy: \"startTime\",\n      });\n\n      const events = response.data.items || [];\n\n      if (events.length === 0) {\n        console.log(`No events found for calendar ${cal.summary}`);\n        continue;\n      }\n\n      console.log(`Found ${events.length} events for calendar ${cal.summary}`);\n\n      for (const event of events) {\n        if (!event.id || !event.summary) continue;\n\n        // Get meeting link\n        let meetingLink: string | null = null;\n        if (event.hangoutLink) {\n          meetingLink = event.hangoutLink;\n        } else if (event.conferenceData?.entryPoints) {\n          const videoEntry = event.conferenceData.entryPoints.find(\n            (entry) => entry.entryPointType === \"video\"\n          );\n          if (videoEntry?.uri) {\n            meetingLink = videoEntry.uri;\n          }\n        }\n\n        // Get attendees\n        const attendees =\n          event.attendees?.map((attendee) => ({\n            email: attendee.email || \"\",\n            name: attendee.displayName || undefined,\n          })) || [];\n\n        // Check if user is organizer\n        const isOrganizer =\n          event.organizer?.email ===\n          event.attendees?.find((attendee) => attendee.self)?.email;\n\n        // Format dates correctly\n        const startTime =\n          event.start?.dateTime ||\n          (event.start?.date ? `${event.start.date}T00:00:00` : null);\n        const endTime =\n          event.end?.dateTime ||\n          (event.end?.date ? `${event.end.date}T23:59:59` : null);\n\n        if (!startTime || !endTime) continue;\n\n        allEvents.push({\n          id: event.id,\n          calendar_id: cal.id,\n          title: event.summary,\n          description: event.description || null,\n          start_time: startTime,\n          end_time: endTime,\n          location: event.location || null,\n          meeting_link: meetingLink,\n          attendees,\n          is_organizer: isOrganizer,\n          status:\n            (event.status as \"confirmed\" | \"tentative\" | \"cancelled\") ||\n            \"confirmed\",\n          html_link: event.htmlLink || \"\",\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        });\n      }\n    }\n\n    console.log(`Total events found: ${allEvents.length}`);\n    return allEvents.sort(\n      (a, b) =>\n        new Date(a.start_time).getTime() - new Date(b.start_time).getTime()\n    );\n  } catch (error) {\n    console.error(\"Error fetching Google Calendar events:\", error);\n    return [];\n  }\n}\n\n/**\n * Store calendar events in Supabase\n */\nexport async function storeCalendarEvents(\n  userId: string,\n  events: CalendarEvent[]\n): Promise<boolean> {\n  try {\n    console.log(`Storing ${events.length} calendar events in Supabase...`);\n\n    if (events.length === 0) {\n      console.log(\"No events to store\");\n      return true;\n    }\n\n    const supabase = createClientClient();\n\n    // Format events for insertion\n    const formattedEvents = events.map((event) => ({\n      user_id: userId,\n      provider: \"google\",\n      external_event_id: event.id,\n      calendar_id: event.calendar_id,\n      title: event.title,\n      description: event.description,\n      start_time: event.start_time,\n      end_time: event.end_time,\n      location: event.location,\n      meeting_link: event.meeting_link,\n      attendees: event.attendees,\n      is_organizer: event.is_organizer,\n      status: event.status,\n      html_link: event.html_link,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    }));\n\n    console.log(\"Upserting events to Supabase...\");\n\n    // Upsert events to handle both new and updated events\n    const { error } = await supabase\n      .from(\"calendar_events\")\n      .upsert(formattedEvents, {\n        onConflict: \"user_id,provider,external_event_id\",\n      });\n\n    if (error) {\n      console.error(\"Error storing calendar events:\", error);\n      return false;\n    }\n\n    console.log(\"Events stored successfully\");\n\n    // Update last sync timestamp\n    console.log(\"Updating last sync timestamp...\");\n    const { error: profileError } = await supabase\n      .from(\"profiles\")\n      .update({\n        last_calendar_sync: new Date().toISOString(),\n      })\n      .eq(\"id\", userId);\n\n    if (profileError) {\n      console.error(\"Error updating last sync timestamp:\", profileError);\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error storing calendar events:\", error);\n    return false;\n  }\n}\n\n/**\n * Sync Google Calendar events to Supabase\n */\nexport async function syncGoogleCalendarEvents(\n  userId: string,\n  daysAhead = 30\n): Promise<boolean> {\n  try {\n    console.log(`Starting calendar sync for user ${userId}...`);\n\n    // Get access token\n    const accessToken = await getGoogleAccessToken(userId);\n    if (!accessToken) {\n      console.error(\"Failed to get access token\");\n      return false;\n    }\n\n    console.log(\"Successfully got access token\");\n\n    // Fetch events from Google Calendar\n    const events = await fetchUpcomingGoogleEvents(userId, daysAhead);\n\n    if (events.length === 0) {\n      console.log(\"No events to sync\");\n      return true;\n    }\n\n    console.log(`Found ${events.length} events to sync`);\n\n    // Store events in Supabase\n    const success = await storeCalendarEvents(userId, events);\n\n    if (!success) {\n      console.error(\"Failed to store calendar events\");\n      return false;\n    }\n\n    console.log(\"Successfully synced calendar events\");\n    return true;\n  } catch (error) {\n    console.error(\"Error syncing Google Calendar events:\", error);\n    return false;\n  }\n}\n\n/**\n * Check if user has connected their Google Calendar\n */\nexport async function isGoogleCalendarConnected(\n  userId: string\n): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    const { data, error } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"id\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    return !error && !!data;\n  } catch (error) {\n    console.error(\"Error checking Google Calendar connection:\", error);\n    return false;\n  }\n}\n\n/**\n * Disconnect Google Calendar integration\n */\nexport async function disconnectGoogleCalendar(\n  userId: string\n): Promise<boolean> {\n  try {\n    const supabase = createClientClient();\n\n    // Delete connection record\n    const { error } = await supabase\n      .from(\"calendar_connections\")\n      .delete()\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\");\n\n    if (error) {\n      console.error(\"Error disconnecting Google Calendar:\", error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error(\"Error disconnecting Google Calendar:\", error);\n    return false;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/services/calendarEventService.ts"],"sourcesContent":["// src/utils/calendar/calendar-events-service.ts\r\nimport { createClient } from '@/utils/supabase/client';\r\n\r\nexport interface CalendarEvent {\r\n  id: string;\r\n  user_id: string;\r\n  provider: string;\r\n  external_event_id: string;\r\n  calendar_id: string;\r\n  title: string;\r\n  description: string | null;\r\n  start_time: string;\r\n  end_time: string;\r\n  location: string | null;\r\n  meeting_link: string | null;\r\n  attendees: { email: string; name?: string }[];\r\n  is_organizer: boolean;\r\n  status: 'confirmed' | 'tentative' | 'cancelled';\r\n  html_link: string;\r\n  synced_to_meeting: boolean;\r\n  meeting_id: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\n/**\r\n * Get upcoming calendar events with meeting links\r\n */\r\nexport async function getUpcomingCalendarEventsWithMeetingLinks(daysAhead: number = 7): Promise<CalendarEvent[]> {\r\n  try {\r\n    const supabase = createClient();\r\n    \r\n    // Get upcoming events with meeting links\r\n    const { data, error } = await supabase\r\n      .from('calendar_events')\r\n      .select('*')\r\n      .not('meeting_link', 'is', null)\r\n      .gte('start_time', new Date().toISOString())\r\n      .lte('start_time', new Date(Date.now() + daysAhead * 24 * 60 * 60 * 1000).toISOString())\r\n      .order('start_time', { ascending: true });\r\n      \r\n    if (error) {\r\n      console.error('Error fetching upcoming events:', error);\r\n      return [];\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (error) {\r\n    console.error('Error fetching upcoming events:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Determine the meeting type from a meeting link\r\n */\r\nexport function determineMeetingType(meetingLink: string): 'google-meets' | 'microsoft-teams' | 'live' {\r\n  const lowerCaseLink = meetingLink.toLowerCase();\r\n  \r\n  if (lowerCaseLink.includes('meet.google.com')) {\r\n    return 'google-meets';\r\n  } else if (lowerCaseLink.includes('teams.microsoft.com')) {\r\n    return 'microsoft-teams';\r\n  } else {\r\n    return 'live';\r\n  }\r\n}\r\n\r\n/**\r\n * Create meetings from calendar events that have meeting links\r\n */\r\nexport async function createMeetingsFromCalendarEvents(): Promise<number> {\r\n  try {\r\n    const supabase = createClient();\r\n    \r\n    // Get upcoming events with meeting links that haven't been synced\r\n    const { data: events, error } = await supabase\r\n      .from('calendar_events')\r\n      .select('*')\r\n      .not('meeting_link', 'is', null)\r\n      .eq('synced_to_meeting', false)\r\n      .gte('start_time', new Date().toISOString())\r\n      .order('start_time', { ascending: true });\r\n      \r\n    if (error) {\r\n      console.error('Error fetching calendar events:', error);\r\n      return 0;\r\n    }\r\n    \r\n    if (!events || events.length === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    let syncedCount = 0;\r\n    \r\n    // Process each event\r\n    for (const event of events) {\r\n      if (!event.meeting_link) continue;\r\n      \r\n      // Determine meeting type\r\n      const meetingType = determineMeetingType(event.meeting_link);\r\n      \r\n      // Create meeting\r\n      const { data: meeting, error: meetingError } = await supabase\r\n        .from('meetings')\r\n        .insert({\r\n          title: event.title,\r\n          description: event.description,\r\n          user_id: event.user_id,\r\n          meeting_type: meetingType,\r\n          start_time: event.start_time,\r\n          end_time: event.end_time,\r\n          calendar_event_id: event.id,\r\n          meeting_url: event.meeting_link,\r\n          attendees: event.attendees,\r\n          location: event.location,\r\n          status: 'scheduled',\r\n          transcription_status: 'pending',\r\n          summary_status: 'pending'\r\n        })\r\n        .select('id')\r\n        .single();\r\n        \r\n      if (meetingError) {\r\n        console.error('Error creating meeting from calendar event:', meetingError);\r\n        continue;\r\n      }\r\n      \r\n      // Update calendar event with meeting ID\r\n      const { error: updateError } = await supabase\r\n        .from('calendar_events')\r\n        .update({\r\n          synced_to_meeting: true,\r\n          meeting_id: meeting.id\r\n        })\r\n        .eq('id', event.id);\r\n        \r\n      if (updateError) {\r\n        console.error('Error updating calendar event:', updateError);\r\n        continue;\r\n      }\r\n      \r\n      syncedCount++;\r\n    }\r\n    \r\n    return syncedCount;\r\n  } catch (error) {\r\n    console.error('Error creating meetings from calendar events:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Get calendar events that have been synced to meetings\r\n */\r\nexport async function getSyncedCalendarEvents(): Promise<CalendarEvent[]> {\r\n  try {\r\n    const supabase = createClient();\r\n    \r\n    // Get events that have been synced to meetings\r\n    const { data, error } = await supabase\r\n      .from('calendar_events')\r\n      .select(`\r\n        *,\r\n        meetings:meeting_id (\r\n          id,\r\n          title,\r\n          start_time,\r\n          end_time,\r\n          meeting_type,\r\n          transcription_status,\r\n          summary_status\r\n        )\r\n      `)\r\n      .eq('synced_to_meeting', true)\r\n      .order('start_time', { ascending: false });\r\n      \r\n    if (error) {\r\n      console.error('Error fetching synced events:', error);\r\n      return [];\r\n    }\r\n    \r\n    return data || [];\r\n  } catch (error) {\r\n    console.error('Error fetching synced events:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Update meetings if calendar events change\r\n */\r\nexport async function updateMeetingsFromCalendarEvents(): Promise<number> {\r\n  try {\r\n    const supabase = createClient();\r\n    \r\n    // Get synced events\r\n    const { data: events, error } = await supabase\r\n      .from('calendar_events')\r\n      .select(`\r\n        *,\r\n        meetings:meeting_id (\r\n          id,\r\n          title,\r\n          start_time,\r\n          end_time\r\n        )\r\n      `)\r\n      .eq('synced_to_meeting', true)\r\n      .not('meeting_id', 'is', null);\r\n      \r\n    if (error) {\r\n      console.error('Error fetching synced events:', error);\r\n      return 0;\r\n    }\r\n    \r\n    if (!events || events.length === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    let updatedCount = 0;\r\n    \r\n    // Process each event\r\n    for (const event of events) {\r\n      if (!event.meeting_id || !event.meetings) continue;\r\n      \r\n      const meeting = event.meetings as any;\r\n      \r\n      // Check if meeting needs updating\r\n      if (\r\n        meeting.title !== event.title ||\r\n        meeting.start_time !== event.start_time ||\r\n        meeting.end_time !== event.end_time\r\n      ) {\r\n        // Update meeting\r\n        const { error: updateError } = await supabase\r\n          .from('meetings')\r\n          .update({\r\n            title: event.title,\r\n            start_time: event.start_time,\r\n            end_time: event.end_time,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('id', event.meeting_id);\r\n          \r\n        if (updateError) {\r\n          console.error('Error updating meeting:', updateError);\r\n          continue;\r\n        }\r\n        \r\n        updatedCount++;\r\n      }\r\n    }\r\n    \r\n    return updatedCount;\r\n  } catch (error) {\r\n    console.error('Error updating meetings from calendar events:', error);\r\n    return 0;\r\n  }\r\n}"],"names":[],"mappings":"AAAA,gDAAgD;;;;;;;;AAChD;;AA2BO,eAAe,0CAA0C,YAAoB,CAAC;IACnF,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAE5B,yCAAyC;QACzC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,mBACL,MAAM,CAAC,KACP,GAAG,CAAC,gBAAgB,MAAM,MAC1B,GAAG,CAAC,cAAc,IAAI,OAAO,WAAW,IACxC,GAAG,CAAC,cAAc,IAAI,KAAK,KAAK,GAAG,KAAK,YAAY,KAAK,KAAK,KAAK,MAAM,WAAW,IACpF,KAAK,CAAC,cAAc;YAAE,WAAW;QAAK;QAEzC,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,EAAE;QACX;QAEA,OAAO,QAAQ,EAAE;IACnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,EAAE;IACX;AACF;AAKO,SAAS,qBAAqB,WAAmB;IACtD,MAAM,gBAAgB,YAAY,WAAW;IAE7C,IAAI,cAAc,QAAQ,CAAC,oBAAoB;QAC7C,OAAO;IACT,OAAO,IAAI,cAAc,QAAQ,CAAC,wBAAwB;QACxD,OAAO;IACT,OAAO;QACL,OAAO;IACT;AACF;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAE5B,kEAAkE;QAClE,MAAM,EAAE,MAAM,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnC,IAAI,CAAC,mBACL,MAAM,CAAC,KACP,GAAG,CAAC,gBAAgB,MAAM,MAC1B,EAAE,CAAC,qBAAqB,OACxB,GAAG,CAAC,cAAc,IAAI,OAAO,WAAW,IACxC,KAAK,CAAC,cAAc;YAAE,WAAW;QAAK;QAEzC,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO;QACT;QAEA,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAClC,OAAO;QACT;QAEA,IAAI,cAAc;QAElB,qBAAqB;QACrB,KAAK,MAAM,SAAS,OAAQ;YAC1B,IAAI,CAAC,MAAM,YAAY,EAAE;YAEzB,yBAAyB;YACzB,MAAM,cAAc,qBAAqB,MAAM,YAAY;YAE3D,iBAAiB;YACjB,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC;gBACN,OAAO,MAAM,KAAK;gBAClB,aAAa,MAAM,WAAW;gBAC9B,SAAS,MAAM,OAAO;gBACtB,cAAc;gBACd,YAAY,MAAM,UAAU;gBAC5B,UAAU,MAAM,QAAQ;gBACxB,mBAAmB,MAAM,EAAE;gBAC3B,aAAa,MAAM,YAAY;gBAC/B,WAAW,MAAM,SAAS;gBAC1B,UAAU,MAAM,QAAQ;gBACxB,QAAQ;gBACR,sBAAsB;gBACtB,gBAAgB;YAClB,GACC,MAAM,CAAC,MACP,MAAM;YAET,IAAI,cAAc;gBAChB,QAAQ,KAAK,CAAC,+CAA+C;gBAC7D;YACF;YAEA,wCAAwC;YACxC,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,mBACL,MAAM,CAAC;gBACN,mBAAmB;gBACnB,YAAY,QAAQ,EAAE;YACxB,GACC,EAAE,CAAC,MAAM,MAAM,EAAE;YAEpB,IAAI,aAAa;gBACf,QAAQ,KAAK,CAAC,kCAAkC;gBAChD;YACF;YAEA;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iDAAiD;QAC/D,OAAO;IACT;AACF;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAE5B,+CAA+C;QAC/C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,mBACL,MAAM,CAAC,CAAC;;;;;;;;;;;MAWT,CAAC,EACA,EAAE,CAAC,qBAAqB,MACxB,KAAK,CAAC,cAAc;YAAE,WAAW;QAAM;QAE1C,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO,EAAE;QACX;QAEA,OAAO,QAAQ,EAAE;IACnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,EAAE;IACX;AACF;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAE5B,oBAAoB;QACpB,MAAM,EAAE,MAAM,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACnC,IAAI,CAAC,mBACL,MAAM,CAAC,CAAC;;;;;;;;MAQT,CAAC,EACA,EAAE,CAAC,qBAAqB,MACxB,GAAG,CAAC,cAAc,MAAM;QAE3B,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,iCAAiC;YAC/C,OAAO;QACT;QAEA,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAClC,OAAO;QACT;QAEA,IAAI,eAAe;QAEnB,qBAAqB;QACrB,KAAK,MAAM,SAAS,OAAQ;YAC1B,IAAI,CAAC,MAAM,UAAU,IAAI,CAAC,MAAM,QAAQ,EAAE;YAE1C,MAAM,UAAU,MAAM,QAAQ;YAE9B,kCAAkC;YAClC,IACE,QAAQ,KAAK,KAAK,MAAM,KAAK,IAC7B,QAAQ,UAAU,KAAK,MAAM,UAAU,IACvC,QAAQ,QAAQ,KAAK,MAAM,QAAQ,EACnC;gBACA,iBAAiB;gBACjB,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,YACL,MAAM,CAAC;oBACN,OAAO,MAAM,KAAK;oBAClB,YAAY,MAAM,UAAU;oBAC5B,UAAU,MAAM,QAAQ;oBACxB,YAAY,IAAI,OAAO,WAAW;gBACpC,GACC,EAAE,CAAC,MAAM,MAAM,UAAU;gBAE5B,IAAI,aAAa;oBACf,QAAQ,KAAK,CAAC,2BAA2B;oBACzC;gBACF;gBAEA;YACF;QACF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iDAAiD;QAC/D,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 888, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/utils/calendar/background-sync.ts"],"sourcesContent":["// src/utils/calendar/background-sync.ts\nimport { createClient } from \"@/utils/supabase/server\";\nimport { syncGoogleCalendarEvents } from \"@/utils/calendar/google-calendar\";\nimport {\n  createMeetingsFromCalendarEvents,\n  updateMeetingsFromCalendarEvents,\n} from \"@/services/calendarEventService\";\n\n/**\n * Perform a complete calendar sync for a specific user\n */\nexport async function syncUserCalendar(userId: string): Promise<boolean> {\n  try {\n    console.log(`Starting calendar sync for user ${userId}...`);\n    const supabase = await createClient();\n\n    // 1. Verify calendar connection\n    const { data: connection, error: connectionError } = await supabase\n      .from(\"calendar_connections\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .eq(\"provider\", \"google\")\n      .single();\n\n    if (connectionError || !connection) {\n      console.error(\"No valid calendar connection found:\", connectionError);\n      return false;\n    }\n\n    console.log(\"Found valid calendar connection:\", {\n      connectionId: connection.id,\n      provider: connection.provider,\n      lastSync: connection.last_sync,\n    });\n\n    // 2. Sync Google Calendar events\n    console.log(\"Starting Google Calendar sync...\");\n    const calendarSyncSuccess = await syncGoogleCalendarEvents(userId);\n\n    if (!calendarSyncSuccess) {\n      console.error(\"Failed to sync Google Calendar events\");\n      return false;\n    }\n\n    console.log(\"Google Calendar events synced successfully\");\n\n    // 3. Create meetings from calendar events with meeting links\n    console.log(\"Creating meetings from calendar events...\");\n    const createdMeetings = await createMeetingsFromCalendarEvents();\n    console.log(`Created ${createdMeetings} meetings from calendar events`);\n\n    // 4. Update existing meetings if calendar events have changed\n    console.log(\"Updating existing meetings...\");\n    const updatedMeetings = await updateMeetingsFromCalendarEvents();\n    console.log(`Updated ${updatedMeetings} existing meetings`);\n\n    // 5. Update last sync timestamp\n    console.log(\"Updating last sync timestamp...\");\n    const { error: updateError } = await supabase\n      .from(\"profiles\")\n      .update({ last_calendar_sync: new Date().toISOString() })\n      .eq(\"id\", userId);\n\n    if (updateError) {\n      console.error(\"Failed to update last sync timestamp:\", updateError);\n    }\n\n    // 6. Get final event count\n    console.log(\"Getting final event count...\");\n    const {\n      data: events,\n      count,\n      error: countError,\n    } = await supabase\n      .from(\"calendar_events\")\n      .select(\"*\", { count: \"exact\" })\n      .eq(\"user_id\", userId);\n\n    console.log(\"Calendar sync completed successfully\", {\n      userId,\n      totalEvents: count,\n      createdMeetings,\n      updatedMeetings,\n      events: events?.map((e) => ({\n        id: e.id,\n        title: e.title,\n        start_time: e.start_time,\n      })),\n      error: countError,\n    });\n\n    return true;\n  } catch (error) {\n    console.error(\"Error in complete user calendar sync:\", error);\n    return false;\n  }\n}\n\n/**\n * Sync calendar events for all users based on their preferred sync frequency\n */\nexport async function syncAllUserCalendars(): Promise<{\n  success: boolean;\n  syncedUsers: number;\n}> {\n  try {\n    const supabase = await createClient();\n\n    // Get all users with their sync frequency\n    const { data: profiles, error } = await supabase\n      .from(\"profiles\")\n      .select(\n        `\n        id,\n        calendar_sync_frequency,\n        last_calendar_sync\n      `\n      )\n      .not(\"calendar_sync_frequency\", \"eq\", \"manual\");\n\n    if (error) {\n      console.error(\"Error fetching user profiles:\", error);\n      return { success: false, syncedUsers: 0 };\n    }\n\n    if (!profiles || profiles.length === 0) {\n      return { success: true, syncedUsers: 0 };\n    }\n\n    let syncedUsers = 0;\n    const now = new Date();\n\n    // Process each user based on their sync frequency\n    for (const profile of profiles) {\n      // Skip if no sync frequency\n      if (!profile.calendar_sync_frequency) continue;\n\n      const lastSync = profile.last_calendar_sync\n        ? new Date(profile.last_calendar_sync)\n        : null;\n      let shouldSync = false;\n\n      // Determine if we should sync based on frequency\n      switch (profile.calendar_sync_frequency) {\n        case \"realtime\":\n          shouldSync = true;\n          break;\n        case \"hourly\":\n          shouldSync =\n            !lastSync || now.getTime() - lastSync.getTime() >= 60 * 60 * 1000;\n          break;\n        case \"daily\":\n          shouldSync =\n            !lastSync ||\n            now.getTime() - lastSync.getTime() >= 24 * 60 * 60 * 1000;\n          break;\n        case \"weekly\":\n          shouldSync =\n            !lastSync ||\n            now.getTime() - lastSync.getTime() >= 7 * 24 * 60 * 60 * 1000;\n          break;\n        default:\n          shouldSync = false;\n      }\n\n      if (shouldSync) {\n        // Use the new syncUserCalendar function for consistency\n        const success = await syncUserCalendar(profile.id);\n        if (success) {\n          syncedUsers++;\n        }\n      }\n    }\n\n    return { success: true, syncedUsers };\n  } catch (error) {\n    console.error(\"Error syncing user calendars:\", error);\n    return { success: false, syncedUsers: 0 };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1034, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/api/auth/google/callback/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { handleGoogleCallback } from '@/utils/calendar/google-calendar';\nimport { createClient } from '@/utils/supabase/server';\nimport { syncUserCalendar } from '@/utils/calendar/background-sync';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('Starting Google OAuth callback handler...');\n    \n    // Get the authorization code from the URL\n    const searchParams = new URL(request.url).searchParams;\n    const code = searchParams.get('code');\n    \n    if (!code) {\n      console.error('No authorization code received in callback');\n      return NextResponse.redirect(new URL('/dashboard?error=Missing authorization code', request.url));\n    }\n\n    console.log('Received authorization code, verifying user...');\n    \n    const supabase = await createClient();\n    \n    // Verify user is authenticated\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error || !user) {\n      console.error('User authentication failed:', error);\n      return NextResponse.redirect(new URL('/login?error=Authentication required', request.url));\n    }\n\n    console.log('User authenticated, handling Google callback...', { userId: user.id });\n    \n    // Handle the callback and store tokens\n    const success = await handleGoogleCallback(code);\n    \n    if (!success) {\n      console.error('Failed to handle Google callback and store tokens');\n      return NextResponse.redirect(new URL('/dashboard?error=Failed to connect Google Calendar', request.url));\n    }\n\n    console.log('Successfully stored Google Calendar tokens, initiating sync...');\n\n    // Verify tokens were stored\n    const { data: connection, error: connectionError } = await supabase\n      .from('calendar_connections')\n      .select('*')\n      .eq('user_id', user.id)\n      .eq('provider', 'google')\n      .single();\n\n    if (connectionError || !connection) {\n      console.error('Failed to verify calendar connection:', connectionError);\n      return NextResponse.redirect(new URL('/dashboard?error=Calendar connection verification failed', request.url));\n    }\n\n    console.log('Calendar connection verified, starting sync...');\n\n    // Trigger immediate sync for 30 days ahead\n    const syncSuccess = await syncUserCalendar(user.id);\n    \n    if (!syncSuccess) {\n      console.error('Initial calendar sync failed');\n      return NextResponse.redirect(new URL('/dashboard?success=Calendar connected but sync failed. Please try manual sync.', request.url));\n    }\n\n    // Verify events were synced\n    const { count, error: eventCountError } = await supabase\n      .from('calendar_events')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', user.id);\n\n    console.log('Sync completed, event count:', { count, error: eventCountError });\n    \n    // Redirect back to dashboard with success message\n    const successMessage = count \n      ? `Calendar connected and synced successfully. Found ${count} events.`\n      : 'Calendar connected successfully but no events found.';\n\n    const redirectUrl = new URL('/dashboard', request.url);\n    redirectUrl.searchParams.set('success', successMessage);\n    \n    return NextResponse.redirect(redirectUrl);\n  } catch (error) {\n    console.error('Unexpected error in Google callback:', error);\n    return NextResponse.redirect(new URL('/dashboard?error=An unexpected error occurred', request.url));\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,0CAA0C;QAC1C,MAAM,eAAe,IAAI,IAAI,QAAQ,GAAG,EAAE,YAAY;QACtD,MAAM,OAAO,aAAa,GAAG,CAAC;QAE9B,IAAI,CAAC,MAAM;YACT,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,+CAA+C,QAAQ,GAAG;QACjG;QAEA,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAElC,+BAA+B;QAC/B,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wCAAwC,QAAQ,GAAG;QAC1F;QAEA,QAAQ,GAAG,CAAC,mDAAmD;YAAE,QAAQ,KAAK,EAAE;QAAC;QAEjF,uCAAuC;QACvC,MAAM,UAAU,MAAM,CAAA,GAAA,gJAAA,CAAA,uBAAoB,AAAD,EAAE;QAE3C,IAAI,CAAC,SAAS;YACZ,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,sDAAsD,QAAQ,GAAG;QACxG;QAEA,QAAQ,GAAG,CAAC;QAEZ,4BAA4B;QAC5B,MAAM,EAAE,MAAM,UAAU,EAAE,OAAO,eAAe,EAAE,GAAG,MAAM,SACxD,IAAI,CAAC,wBACL,MAAM,CAAC,KACP,EAAE,CAAC,WAAW,KAAK,EAAE,EACrB,EAAE,CAAC,YAAY,UACf,MAAM;QAET,IAAI,mBAAmB,CAAC,YAAY;YAClC,QAAQ,KAAK,CAAC,yCAAyC;YACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,4DAA4D,QAAQ,GAAG;QAC9G;QAEA,QAAQ,GAAG,CAAC;QAEZ,2CAA2C;QAC3C,MAAM,cAAc,MAAM,CAAA,GAAA,gJAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,EAAE;QAElD,IAAI,CAAC,aAAa;YAChB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,kFAAkF,QAAQ,GAAG;QACpI;QAEA,4BAA4B;QAC5B,MAAM,EAAE,KAAK,EAAE,OAAO,eAAe,EAAE,GAAG,MAAM,SAC7C,IAAI,CAAC,mBACL,MAAM,CAAC,KAAK;YAAE,OAAO;YAAS,MAAM;QAAK,GACzC,EAAE,CAAC,WAAW,KAAK,EAAE;QAExB,QAAQ,GAAG,CAAC,gCAAgC;YAAE;YAAO,OAAO;QAAgB;QAE5E,kDAAkD;QAClD,MAAM,iBAAiB,QACnB,CAAC,kDAAkD,EAAE,MAAM,QAAQ,CAAC,GACpE;QAEJ,MAAM,cAAc,IAAI,IAAI,cAAc,QAAQ,GAAG;QACrD,YAAY,YAAY,CAAC,GAAG,CAAC,WAAW;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iDAAiD,QAAQ,GAAG;IACnG;AACF","debugId":null}}]
}