{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/utils/supabase/server.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { createServerClient } from \"@supabase/ssr\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies();\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value, ...options });\r\n          } catch (error) {\r\n            // Handle cookie setting error\r\n            console.error(\"Error setting cookie:\", error);\r\n          }\r\n        },\r\n        remove(name: string, options: any) {\r\n          try {\r\n            cookieStore.set({ name, value: \"\", ...options });\r\n          } catch (error) {\r\n            // Handle cookie removal error\r\n            console.error(\"Error removing cookie:\", error);\r\n          }\r\n        },\r\n      },\r\n    }\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;;;;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAY;gBAC3C,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,yBAAyB;gBACzC;YACF;YACA,QAAO,IAAY,EAAE,OAAY;gBAC/B,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;oBACd,8BAA8B;oBAC9B,QAAQ,KAAK,CAAC,0BAA0B;gBAC1C;YACF;QACF;IACF;AAEJ;;;IA9BsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/api/stripe/success/route.ts"],"sourcesContent":["// src/app/api/stripe/success/route.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log(\"üéâ Stripe success callback received\");\r\n\r\n    const supabase = await createClient();\r\n    const url = new URL(request.url);\r\n\r\n    // Get session info from Stripe\r\n    const sessionId = url.searchParams.get(\"session_id\");\r\n    console.log(\"Stripe session ID:\", sessionId);\r\n\r\n    // Get the current user\r\n    const {\r\n      data: { user },\r\n      error: userError,\r\n    } = await supabase.auth.getUser();\r\n\r\n    if (userError || !user) {\r\n      console.error(\"‚ùå User not authenticated:\", userError);\r\n      return NextResponse.redirect(\r\n        new URL(\"/login?error=Authentication required\", request.url)\r\n      );\r\n    }\r\n\r\n    console.log(\"üí≥ Updating payment status for user:\", user.id);\r\n\r\n    // Update the user's onboarding record to mark payment as completed\r\n    const { error: updateError } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update({\r\n        payment_completed: true,\r\n        updated_at: new Date().toISOString(),\r\n        // Optionally store Stripe session ID for reference\r\n        ...(sessionId && { stripe_session_id: sessionId }),\r\n      })\r\n      .eq(\"user_id\", user.id);\r\n\r\n    if (updateError) {\r\n      console.error(\"üö® Error updating payment status:\", updateError);\r\n      return NextResponse.redirect(\r\n        new URL(\"/error?message=Failed to update payment status\", request.url)\r\n      );\r\n    }\r\n\r\n    console.log(\"‚úÖ Payment status updated successfully\");\r\n\r\n    // Redirect to onboarding\r\n    return NextResponse.redirect(new URL(\"/onboarding\", request.url));\r\n  } catch (error) {\r\n    console.error(\"üö® Error in Stripe success handler:\", error);\r\n    return NextResponse.redirect(\r\n      new URL(\"/error?message=Payment processing error\", request.url)\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;AACtC;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,WAAW,MAAM,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD;QAClC,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;QAE/B,+BAA+B;QAC/B,MAAM,YAAY,IAAI,YAAY,CAAC,GAAG,CAAC;QACvC,QAAQ,GAAG,CAAC,sBAAsB;QAElC,uBAAuB;QACvB,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACd,OAAO,SAAS,EACjB,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE/B,IAAI,aAAa,CAAC,MAAM;YACtB,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAC1B,IAAI,IAAI,wCAAwC,QAAQ,GAAG;QAE/D;QAEA,QAAQ,GAAG,CAAC,wCAAwC,KAAK,EAAE;QAE3D,mEAAmE;QACnE,MAAM,EAAE,OAAO,WAAW,EAAE,GAAG,MAAM,SAClC,IAAI,CAAC,mBACL,MAAM,CAAC;YACN,mBAAmB;YACnB,YAAY,IAAI,OAAO,WAAW;YAClC,mDAAmD;YACnD,GAAI,aAAa;gBAAE,mBAAmB;YAAU,CAAC;QACnD,GACC,EAAE,CAAC,WAAW,KAAK,EAAE;QAExB,IAAI,aAAa;YACf,QAAQ,KAAK,CAAC,qCAAqC;YACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAC1B,IAAI,IAAI,kDAAkD,QAAQ,GAAG;QAEzE;QAEA,QAAQ,GAAG,CAAC;QAEZ,yBAAyB;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,eAAe,QAAQ,GAAG;IACjE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAC1B,IAAI,IAAI,2CAA2C,QAAQ,GAAG;IAElE;AACF","debugId":null}}]
}