{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/%28auth%29/onboarding/actions.ts"],"sourcesContent":["// src/app/(auth)/onboarding/actions.ts\r\n\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function updateProfile(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  const { error } = await supabase.from(\"profiles\").upsert({\r\n    id: user.id,\r\n    full_name: formData.get(\"fullName\") as string,\r\n    username: formData.get(\"username\") as string,\r\n    bio: formData.get(\"bio\") as string,\r\n    updated_at: new Date().toISOString(),\r\n  });\r\n\r\n  if (error) {\r\n    redirect(\"/error?message=\" + encodeURIComponent(error.message));\r\n  }\r\n\r\n  revalidatePath(\"/\", \"layout\");\r\n  redirect(\"/dashboard\");\r\n}\r\n\r\nexport async function completeOnboarding(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  // Extract form data\r\n  const userType = formData.get(\"userType\") as string;\r\n  const teamSize = formData.get(\"teamSize\") as string;\r\n  const referralSource = formData.get(\"referralSource\") as string;\r\n  const audioPurpose = formData.get(\"audioPurpose\") as string;\r\n  const paymentCompleted = formData.get(\"paymentCompleted\") === \"true\";\r\n  const micPermission = formData.get(\"micPermission\") === \"true\";\r\n\r\n  try {\r\n    // Check if onboarding record already exists\r\n    const { data: existingOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const onboardingData = {\r\n      user_id: user.id,\r\n      completed_at: new Date().toISOString(),\r\n      answers: {\r\n        userType,\r\n        teamSize,\r\n        referralSource,\r\n        audioPurpose,\r\n        micPermission,\r\n      },\r\n      payment_completed: paymentCompleted,\r\n      user_type: userType,\r\n      team_size: teamSize,\r\n      referral_source: referralSource,\r\n      audio_purpose: audioPurpose,\r\n      mic_permission: micPermission,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    let onboardingError;\r\n\r\n    if (existingOnboarding) {\r\n      // Update existing record\r\n      const { error } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update(onboardingData)\r\n        .eq(\"user_id\", user.id);\r\n      onboardingError = error;\r\n    } else {\r\n      // Insert new record (shouldn't happen in normal flow, but handle it)\r\n      const { error } = await supabase.from(\"user_onboarding\").insert({\r\n        ...onboardingData,\r\n        payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n      });\r\n      onboardingError = error;\r\n    }\r\n\r\n    if (onboardingError) {\r\n      console.error(\"Onboarding error:\", onboardingError);\r\n      return { error: onboardingError.message };\r\n    }\r\n\r\n    // Update user profile if needed\r\n    const { error: profileError } = await supabase.from(\"profiles\").upsert({\r\n      id: user.id,\r\n      onboarding_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n\r\n    if (profileError) {\r\n      console.error(\"Profile update error:\", profileError);\r\n      // Don't return error here as onboarding data was saved successfully\r\n    }\r\n\r\n    console.log(\"✅ Onboarding completed successfully for user:\", user.id);\r\n\r\n    revalidatePath(\"/\", \"layout\");\r\n    redirect(\"/dashboard\");\r\n  } catch (error) {\r\n    console.error(\"Unexpected error during onboarding:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function checkPaymentStatus(userId: string) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, payment_link_tag\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = Row not found\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      paymentCompleted: data?.payment_completed || false,\r\n      paymentLinkTag: data?.payment_link_tag || null,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking payment status:\", error);\r\n    return {\r\n      paymentCompleted: false,\r\n      paymentLinkTag: null,\r\n      error:\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to check payment status\",\r\n    };\r\n  }\r\n}\r\n\r\n// New function to verify payment completion (can be called from Stripe webhook)\r\nexport async function markPaymentCompleted(\r\n  userId: string,\r\n  stripeSessionId?: string\r\n) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const updateData: any = {\r\n      payment_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (stripeSessionId) {\r\n      updateData.stripe_session_id = stripeSessionId;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update(updateData)\r\n      .eq(\"user_id\", userId);\r\n\r\n    if (error) {\r\n      console.error(\"Error marking payment as completed:\", error);\r\n      return { error: error.message };\r\n    }\r\n\r\n    console.log(\"✅ Payment marked as completed for user:\", userId);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Unexpected error marking payment as completed:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,uCAAuC","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/%28auth%29/onboarding/actions.ts"],"sourcesContent":["// src/app/(auth)/onboarding/actions.ts\r\n\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function updateProfile(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  const { error } = await supabase.from(\"profiles\").upsert({\r\n    id: user.id,\r\n    full_name: formData.get(\"fullName\") as string,\r\n    username: formData.get(\"username\") as string,\r\n    bio: formData.get(\"bio\") as string,\r\n    updated_at: new Date().toISOString(),\r\n  });\r\n\r\n  if (error) {\r\n    redirect(\"/error?message=\" + encodeURIComponent(error.message));\r\n  }\r\n\r\n  revalidatePath(\"/\", \"layout\");\r\n  redirect(\"/dashboard\");\r\n}\r\n\r\nexport async function completeOnboarding(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  // Extract form data\r\n  const userType = formData.get(\"userType\") as string;\r\n  const teamSize = formData.get(\"teamSize\") as string;\r\n  const referralSource = formData.get(\"referralSource\") as string;\r\n  const audioPurpose = formData.get(\"audioPurpose\") as string;\r\n  const paymentCompleted = formData.get(\"paymentCompleted\") === \"true\";\r\n  const micPermission = formData.get(\"micPermission\") === \"true\";\r\n\r\n  try {\r\n    // Check if onboarding record already exists\r\n    const { data: existingOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const onboardingData = {\r\n      user_id: user.id,\r\n      completed_at: new Date().toISOString(),\r\n      answers: {\r\n        userType,\r\n        teamSize,\r\n        referralSource,\r\n        audioPurpose,\r\n        micPermission,\r\n      },\r\n      payment_completed: paymentCompleted,\r\n      user_type: userType,\r\n      team_size: teamSize,\r\n      referral_source: referralSource,\r\n      audio_purpose: audioPurpose,\r\n      mic_permission: micPermission,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    let onboardingError;\r\n\r\n    if (existingOnboarding) {\r\n      // Update existing record\r\n      const { error } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update(onboardingData)\r\n        .eq(\"user_id\", user.id);\r\n      onboardingError = error;\r\n    } else {\r\n      // Insert new record (shouldn't happen in normal flow, but handle it)\r\n      const { error } = await supabase.from(\"user_onboarding\").insert({\r\n        ...onboardingData,\r\n        payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n      });\r\n      onboardingError = error;\r\n    }\r\n\r\n    if (onboardingError) {\r\n      console.error(\"Onboarding error:\", onboardingError);\r\n      return { error: onboardingError.message };\r\n    }\r\n\r\n    // Update user profile if needed\r\n    const { error: profileError } = await supabase.from(\"profiles\").upsert({\r\n      id: user.id,\r\n      onboarding_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n\r\n    if (profileError) {\r\n      console.error(\"Profile update error:\", profileError);\r\n      // Don't return error here as onboarding data was saved successfully\r\n    }\r\n\r\n    console.log(\"✅ Onboarding completed successfully for user:\", user.id);\r\n\r\n    revalidatePath(\"/\", \"layout\");\r\n    redirect(\"/dashboard\");\r\n  } catch (error) {\r\n    console.error(\"Unexpected error during onboarding:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function checkPaymentStatus(userId: string) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, payment_link_tag\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = Row not found\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      paymentCompleted: data?.payment_completed || false,\r\n      paymentLinkTag: data?.payment_link_tag || null,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking payment status:\", error);\r\n    return {\r\n      paymentCompleted: false,\r\n      paymentLinkTag: null,\r\n      error:\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to check payment status\",\r\n    };\r\n  }\r\n}\r\n\r\n// New function to verify payment completion (can be called from Stripe webhook)\r\nexport async function markPaymentCompleted(\r\n  userId: string,\r\n  stripeSessionId?: string\r\n) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const updateData: any = {\r\n      payment_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (stripeSessionId) {\r\n      updateData.stripe_session_id = stripeSessionId;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update(updateData)\r\n      .eq(\"user_id\", userId);\r\n\r\n    if (error) {\r\n      console.error(\"Error marking payment as completed:\", error);\r\n      return { error: error.message };\r\n    }\r\n\r\n    console.log(\"✅ Payment marked as completed for user:\", userId);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Unexpected error marking payment as completed:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAOsB,gBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/%28auth%29/onboarding/actions.ts"],"sourcesContent":["// src/app/(auth)/onboarding/actions.ts\r\n\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function updateProfile(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  const { error } = await supabase.from(\"profiles\").upsert({\r\n    id: user.id,\r\n    full_name: formData.get(\"fullName\") as string,\r\n    username: formData.get(\"username\") as string,\r\n    bio: formData.get(\"bio\") as string,\r\n    updated_at: new Date().toISOString(),\r\n  });\r\n\r\n  if (error) {\r\n    redirect(\"/error?message=\" + encodeURIComponent(error.message));\r\n  }\r\n\r\n  revalidatePath(\"/\", \"layout\");\r\n  redirect(\"/dashboard\");\r\n}\r\n\r\nexport async function completeOnboarding(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  // Extract form data\r\n  const userType = formData.get(\"userType\") as string;\r\n  const teamSize = formData.get(\"teamSize\") as string;\r\n  const referralSource = formData.get(\"referralSource\") as string;\r\n  const audioPurpose = formData.get(\"audioPurpose\") as string;\r\n  const paymentCompleted = formData.get(\"paymentCompleted\") === \"true\";\r\n  const micPermission = formData.get(\"micPermission\") === \"true\";\r\n\r\n  try {\r\n    // Check if onboarding record already exists\r\n    const { data: existingOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const onboardingData = {\r\n      user_id: user.id,\r\n      completed_at: new Date().toISOString(),\r\n      answers: {\r\n        userType,\r\n        teamSize,\r\n        referralSource,\r\n        audioPurpose,\r\n        micPermission,\r\n      },\r\n      payment_completed: paymentCompleted,\r\n      user_type: userType,\r\n      team_size: teamSize,\r\n      referral_source: referralSource,\r\n      audio_purpose: audioPurpose,\r\n      mic_permission: micPermission,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    let onboardingError;\r\n\r\n    if (existingOnboarding) {\r\n      // Update existing record\r\n      const { error } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update(onboardingData)\r\n        .eq(\"user_id\", user.id);\r\n      onboardingError = error;\r\n    } else {\r\n      // Insert new record (shouldn't happen in normal flow, but handle it)\r\n      const { error } = await supabase.from(\"user_onboarding\").insert({\r\n        ...onboardingData,\r\n        payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n      });\r\n      onboardingError = error;\r\n    }\r\n\r\n    if (onboardingError) {\r\n      console.error(\"Onboarding error:\", onboardingError);\r\n      return { error: onboardingError.message };\r\n    }\r\n\r\n    // Update user profile if needed\r\n    const { error: profileError } = await supabase.from(\"profiles\").upsert({\r\n      id: user.id,\r\n      onboarding_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n\r\n    if (profileError) {\r\n      console.error(\"Profile update error:\", profileError);\r\n      // Don't return error here as onboarding data was saved successfully\r\n    }\r\n\r\n    console.log(\"✅ Onboarding completed successfully for user:\", user.id);\r\n\r\n    revalidatePath(\"/\", \"layout\");\r\n    redirect(\"/dashboard\");\r\n  } catch (error) {\r\n    console.error(\"Unexpected error during onboarding:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function checkPaymentStatus(userId: string) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, payment_link_tag\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = Row not found\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      paymentCompleted: data?.payment_completed || false,\r\n      paymentLinkTag: data?.payment_link_tag || null,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking payment status:\", error);\r\n    return {\r\n      paymentCompleted: false,\r\n      paymentLinkTag: null,\r\n      error:\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to check payment status\",\r\n    };\r\n  }\r\n}\r\n\r\n// New function to verify payment completion (can be called from Stripe webhook)\r\nexport async function markPaymentCompleted(\r\n  userId: string,\r\n  stripeSessionId?: string\r\n) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const updateData: any = {\r\n      payment_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (stripeSessionId) {\r\n      updateData.stripe_session_id = stripeSessionId;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update(updateData)\r\n      .eq(\"user_id\", userId);\r\n\r\n    if (error) {\r\n      console.error(\"Error marking payment as completed:\", error);\r\n      return { error: error.message };\r\n    }\r\n\r\n    console.log(\"✅ Payment marked as completed for user:\", userId);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Unexpected error marking payment as completed:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAmCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/%28auth%29/onboarding/actions.ts"],"sourcesContent":["// src/app/(auth)/onboarding/actions.ts\r\n\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function updateProfile(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  const { error } = await supabase.from(\"profiles\").upsert({\r\n    id: user.id,\r\n    full_name: formData.get(\"fullName\") as string,\r\n    username: formData.get(\"username\") as string,\r\n    bio: formData.get(\"bio\") as string,\r\n    updated_at: new Date().toISOString(),\r\n  });\r\n\r\n  if (error) {\r\n    redirect(\"/error?message=\" + encodeURIComponent(error.message));\r\n  }\r\n\r\n  revalidatePath(\"/\", \"layout\");\r\n  redirect(\"/dashboard\");\r\n}\r\n\r\nexport async function completeOnboarding(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  // Extract form data\r\n  const userType = formData.get(\"userType\") as string;\r\n  const teamSize = formData.get(\"teamSize\") as string;\r\n  const referralSource = formData.get(\"referralSource\") as string;\r\n  const audioPurpose = formData.get(\"audioPurpose\") as string;\r\n  const paymentCompleted = formData.get(\"paymentCompleted\") === \"true\";\r\n  const micPermission = formData.get(\"micPermission\") === \"true\";\r\n\r\n  try {\r\n    // Check if onboarding record already exists\r\n    const { data: existingOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const onboardingData = {\r\n      user_id: user.id,\r\n      completed_at: new Date().toISOString(),\r\n      answers: {\r\n        userType,\r\n        teamSize,\r\n        referralSource,\r\n        audioPurpose,\r\n        micPermission,\r\n      },\r\n      payment_completed: paymentCompleted,\r\n      user_type: userType,\r\n      team_size: teamSize,\r\n      referral_source: referralSource,\r\n      audio_purpose: audioPurpose,\r\n      mic_permission: micPermission,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    let onboardingError;\r\n\r\n    if (existingOnboarding) {\r\n      // Update existing record\r\n      const { error } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update(onboardingData)\r\n        .eq(\"user_id\", user.id);\r\n      onboardingError = error;\r\n    } else {\r\n      // Insert new record (shouldn't happen in normal flow, but handle it)\r\n      const { error } = await supabase.from(\"user_onboarding\").insert({\r\n        ...onboardingData,\r\n        payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n      });\r\n      onboardingError = error;\r\n    }\r\n\r\n    if (onboardingError) {\r\n      console.error(\"Onboarding error:\", onboardingError);\r\n      return { error: onboardingError.message };\r\n    }\r\n\r\n    // Update user profile if needed\r\n    const { error: profileError } = await supabase.from(\"profiles\").upsert({\r\n      id: user.id,\r\n      onboarding_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n\r\n    if (profileError) {\r\n      console.error(\"Profile update error:\", profileError);\r\n      // Don't return error here as onboarding data was saved successfully\r\n    }\r\n\r\n    console.log(\"✅ Onboarding completed successfully for user:\", user.id);\r\n\r\n    revalidatePath(\"/\", \"layout\");\r\n    redirect(\"/dashboard\");\r\n  } catch (error) {\r\n    console.error(\"Unexpected error during onboarding:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function checkPaymentStatus(userId: string) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, payment_link_tag\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = Row not found\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      paymentCompleted: data?.payment_completed || false,\r\n      paymentLinkTag: data?.payment_link_tag || null,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking payment status:\", error);\r\n    return {\r\n      paymentCompleted: false,\r\n      paymentLinkTag: null,\r\n      error:\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to check payment status\",\r\n    };\r\n  }\r\n}\r\n\r\n// New function to verify payment completion (can be called from Stripe webhook)\r\nexport async function markPaymentCompleted(\r\n  userId: string,\r\n  stripeSessionId?: string\r\n) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const updateData: any = {\r\n      payment_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (stripeSessionId) {\r\n      updateData.stripe_session_id = stripeSessionId;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update(updateData)\r\n      .eq(\"user_id\", userId);\r\n\r\n    if (error) {\r\n      console.error(\"Error marking payment as completed:\", error);\r\n      return { error: error.message };\r\n    }\r\n\r\n    console.log(\"✅ Payment marked as completed for user:\", userId);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Unexpected error marking payment as completed:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAkIsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/src/app/%28auth%29/onboarding/actions.ts"],"sourcesContent":["// src/app/(auth)/onboarding/actions.ts\r\n\"use server\";\r\n\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { createClient } from \"@/utils/supabase/server\";\r\n\r\nexport async function updateProfile(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  const { error } = await supabase.from(\"profiles\").upsert({\r\n    id: user.id,\r\n    full_name: formData.get(\"fullName\") as string,\r\n    username: formData.get(\"username\") as string,\r\n    bio: formData.get(\"bio\") as string,\r\n    updated_at: new Date().toISOString(),\r\n  });\r\n\r\n  if (error) {\r\n    redirect(\"/error?message=\" + encodeURIComponent(error.message));\r\n  }\r\n\r\n  revalidatePath(\"/\", \"layout\");\r\n  redirect(\"/dashboard\");\r\n}\r\n\r\nexport async function completeOnboarding(formData: FormData) {\r\n  const supabase = await createClient();\r\n\r\n  const {\r\n    data: { user },\r\n    error: userError,\r\n  } = await supabase.auth.getUser();\r\n\r\n  if (userError || !user) {\r\n    redirect(\"/login\");\r\n  }\r\n\r\n  // Extract form data\r\n  const userType = formData.get(\"userType\") as string;\r\n  const teamSize = formData.get(\"teamSize\") as string;\r\n  const referralSource = formData.get(\"referralSource\") as string;\r\n  const audioPurpose = formData.get(\"audioPurpose\") as string;\r\n  const paymentCompleted = formData.get(\"paymentCompleted\") === \"true\";\r\n  const micPermission = formData.get(\"micPermission\") === \"true\";\r\n\r\n  try {\r\n    // Check if onboarding record already exists\r\n    const { data: existingOnboarding } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"*\")\r\n      .eq(\"user_id\", user.id)\r\n      .single();\r\n\r\n    const onboardingData = {\r\n      user_id: user.id,\r\n      completed_at: new Date().toISOString(),\r\n      answers: {\r\n        userType,\r\n        teamSize,\r\n        referralSource,\r\n        audioPurpose,\r\n        micPermission,\r\n      },\r\n      payment_completed: paymentCompleted,\r\n      user_type: userType,\r\n      team_size: teamSize,\r\n      referral_source: referralSource,\r\n      audio_purpose: audioPurpose,\r\n      mic_permission: micPermission,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    let onboardingError;\r\n\r\n    if (existingOnboarding) {\r\n      // Update existing record\r\n      const { error } = await supabase\r\n        .from(\"user_onboarding\")\r\n        .update(onboardingData)\r\n        .eq(\"user_id\", user.id);\r\n      onboardingError = error;\r\n    } else {\r\n      // Insert new record (shouldn't happen in normal flow, but handle it)\r\n      const { error } = await supabase.from(\"user_onboarding\").insert({\r\n        ...onboardingData,\r\n        payment_link_tag: user.user_metadata?.payment_link_tag || null,\r\n      });\r\n      onboardingError = error;\r\n    }\r\n\r\n    if (onboardingError) {\r\n      console.error(\"Onboarding error:\", onboardingError);\r\n      return { error: onboardingError.message };\r\n    }\r\n\r\n    // Update user profile if needed\r\n    const { error: profileError } = await supabase.from(\"profiles\").upsert({\r\n      id: user.id,\r\n      onboarding_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n\r\n    if (profileError) {\r\n      console.error(\"Profile update error:\", profileError);\r\n      // Don't return error here as onboarding data was saved successfully\r\n    }\r\n\r\n    console.log(\"✅ Onboarding completed successfully for user:\", user.id);\r\n\r\n    revalidatePath(\"/\", \"layout\");\r\n    redirect(\"/dashboard\");\r\n  } catch (error) {\r\n    console.error(\"Unexpected error during onboarding:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport async function checkPaymentStatus(userId: string) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .select(\"payment_completed, payment_link_tag\")\r\n      .eq(\"user_id\", userId)\r\n      .single();\r\n\r\n    if (error && error.code !== \"PGRST116\") {\r\n      // PGRST116 = Row not found\r\n      throw error;\r\n    }\r\n\r\n    return {\r\n      paymentCompleted: data?.payment_completed || false,\r\n      paymentLinkTag: data?.payment_link_tag || null,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error checking payment status:\", error);\r\n    return {\r\n      paymentCompleted: false,\r\n      paymentLinkTag: null,\r\n      error:\r\n        error instanceof Error\r\n          ? error.message\r\n          : \"Failed to check payment status\",\r\n    };\r\n  }\r\n}\r\n\r\n// New function to verify payment completion (can be called from Stripe webhook)\r\nexport async function markPaymentCompleted(\r\n  userId: string,\r\n  stripeSessionId?: string\r\n) {\r\n  const supabase = await createClient();\r\n\r\n  try {\r\n    const updateData: any = {\r\n      payment_completed: true,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n\r\n    if (stripeSessionId) {\r\n      updateData.stripe_session_id = stripeSessionId;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from(\"user_onboarding\")\r\n      .update(updateData)\r\n      .eq(\"user_id\", userId);\r\n\r\n    if (error) {\r\n      console.error(\"Error marking payment as completed:\", error);\r\n      return { error: error.message };\r\n    }\r\n\r\n    console.log(\"✅ Payment marked as completed for user:\", userId);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Unexpected error marking payment as completed:\", error);\r\n    return {\r\n      error:\r\n        error instanceof Error ? error.message : \"An unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;IAmKsB,uBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///D:/breyholtz%20holding/arti-notes/arti-notes-v3/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}