{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/%28auth%29/login/actions.ts"],"sourcesContent":["'use server'\r\n\r\nimport { revalidatePath } from 'next/cache'\r\nimport { redirect } from 'next/navigation'\r\n\r\nimport { createClient } from '@/utils/supabase/server'\r\n\r\nexport async function login(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signInWithPassword(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signup(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signUp(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signInWithGoogle() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'google',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}\r\n\r\nexport async function signInWithMicrosoft() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'azure',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IAOsB,QAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/%28auth%29/login/actions.ts"],"sourcesContent":["'use server'\r\n\r\nimport { revalidatePath } from 'next/cache'\r\nimport { redirect } from 'next/navigation'\r\n\r\nimport { createClient } from '@/utils/supabase/server'\r\n\r\nexport async function login(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signInWithPassword(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signup(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signUp(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signInWithGoogle() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'google',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}\r\n\r\nexport async function signInWithMicrosoft() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'azure',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IA+CsB,mBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/%28auth%29/login/actions.ts"],"sourcesContent":["'use server'\r\n\r\nimport { revalidatePath } from 'next/cache'\r\nimport { redirect } from 'next/navigation'\r\n\r\nimport { createClient } from '@/utils/supabase/server'\r\n\r\nexport async function login(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signInWithPassword(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signup(formData: FormData) {\r\n  const supabase = await createClient()\r\n\r\n  // type-casting here for convenience\r\n  // in practice, you should validate your inputs\r\n  const data = {\r\n    email: formData.get('email') as string,\r\n    password: formData.get('password') as string,\r\n  }\r\n\r\n  const { error } = await supabase.auth.signUp(data)\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n\r\n  revalidatePath('/', 'layout')\r\n  redirect('/dashboard')\r\n}\r\n\r\nexport async function signInWithGoogle() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'google',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}\r\n\r\nexport async function signInWithMicrosoft() {\r\n  const supabase = await createClient()\r\n  const { error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'azure',\r\n    options: {\r\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    redirect('/error')\r\n  }\r\n}"],"names":[],"mappings":";;;;;;IA6DsB,sBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/breyholtz%20holding/arti-notes/arti-notes-v2/src/app/%28auth%29/login/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { login, signInWithGoogle, signInWithMicrosoft } from \"./actions\";\r\nimport { FaGoogle, FaMicrosoft } from \"react-icons/fa\";\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100\">\r\n      <div className=\"w-full max-w-md p-8 space-y-8 bg-white rounded-xl shadow-lg\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-3xl font-bold text-gray-900\">Welcome back</h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">Sign in to your account</p>\r\n        </div>\r\n\r\n        <form action={login} className=\"mt-8 space-y-6\">\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <label\r\n                htmlFor=\"email\"\r\n                className=\"block text-sm font-medium text-gray-700\"\r\n              >\r\n                Email address\r\n              </label>\r\n              <input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                required\r\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label\r\n                htmlFor=\"password\"\r\n                className=\"block text-sm font-medium text-gray-700\"\r\n              >\r\n                Password\r\n              </label>\r\n              <input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                required\r\n                className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                id=\"remember-me\"\r\n                name=\"remember-me\"\r\n                type=\"checkbox\"\r\n                className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded\"\r\n              />\r\n              <label\r\n                htmlFor=\"remember-me\"\r\n                className=\"ml-2 block text-sm text-gray-900\"\r\n              >\r\n                Remember me\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"text-sm\">\r\n              <a\r\n                href=\"#\"\r\n                className=\"font-medium text-indigo-600 hover:text-indigo-500\"\r\n              >\r\n                Forgot your password?\r\n              </a>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n            >\r\n              Sign in\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"mt-6\">\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-0 flex items-center\">\r\n                <div className=\"w-full border-t border-gray-300\" />\r\n              </div>\r\n              <div className=\"relative flex justify-center text-sm\">\r\n                <span className=\"px-2 bg-white text-gray-500\">\r\n                  Or continue with\r\n                </span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-6 grid grid-cols-2 gap-3\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => signInWithGoogle()}\r\n                className=\"w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\r\n              >\r\n                <FaGoogle className=\"w-5 h-5\" />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => signInWithMicrosoft()}\r\n                className=\"w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50\"\r\n              >\r\n                <FaMicrosoft className=\"w-5 h-5\" />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AACA;AAHA;;;;AAKe,SAAS;IACtB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAG,WAAU;sCAAmC;;;;;;sCACjD,6LAAC;4BAAE,WAAU;sCAA6B;;;;;;;;;;;;8BAG5C,6LAAC;oBAAK,QAAQ,0KAAA,CAAA,QAAK;oBAAE,WAAU;;sCAC7B,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;;sDACC,6LAAC;4CACC,SAAQ;4CACR,WAAU;sDACX;;;;;;sDAGD,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,QAAQ;4CACR,WAAU;;;;;;;;;;;;8CAGd,6LAAC;;sDACC,6LAAC;4CACC,SAAQ;4CACR,WAAU;sDACX;;;;;;sDAGD,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,QAAQ;4CACR,WAAU;;;;;;;;;;;;;;;;;;sCAKhB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,WAAU;;;;;;sDAEZ,6LAAC;4CACC,SAAQ;4CACR,WAAU;sDACX;;;;;;;;;;;;8CAKH,6LAAC;oCAAI,WAAU;8CACb,cAAA,6LAAC;wCACC,MAAK;wCACL,WAAU;kDACX;;;;;;;;;;;;;;;;;sCAML,6LAAC;sCACC,cAAA,6LAAC;gCACC,MAAK;gCACL,WAAU;0CACX;;;;;;;;;;;sCAKH,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;sDACb,cAAA,6LAAC;gDAAI,WAAU;;;;;;;;;;;sDAEjB,6LAAC;4CAAI,WAAU;sDACb,cAAA,6LAAC;gDAAK,WAAU;0DAA8B;;;;;;;;;;;;;;;;;8CAMlD,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CACC,MAAK;4CACL,SAAS,IAAM,CAAA,GAAA,0KAAA,CAAA,mBAAgB,AAAD;4CAC9B,WAAU;sDAEV,cAAA,6LAAC,iJAAA,CAAA,WAAQ;gDAAC,WAAU;;;;;;;;;;;sDAEtB,6LAAC;4CACC,MAAK;4CACL,SAAS,IAAM,CAAA,GAAA,0KAAA,CAAA,sBAAmB,AAAD;4CACjC,WAAU;sDAEV,cAAA,6LAAC,iJAAA,CAAA,cAAW;gDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQvC;KA/GwB","debugId":null}}]
}