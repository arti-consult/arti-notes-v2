{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/maryniukk/Documents/Work/arti-notes-v2-main/src/utils/tracking/server.ts"],"sourcesContent":["\"use server\";\n\n// src/utils/tracking/server.ts\nimport { createClient } from \"@/utils/supabase/server\";\nimport { cookies } from \"next/headers\";\nimport { UTMParams } from \"./utm\";\nimport {\n  UTM_COOKIE_NAME,\n  VISIT_COOKIE_NAME,\n  ANONYMOUS_ID_COOKIE,\n  COOKIE_OPTIONS,\n} from \"./constants\";\n\n/**\n * Get cookie store, handling both Pages Router and App Router\n */\nasync function getCookieStore() {\n  const cookieStore = cookies();\n  return cookieStore instanceof Promise ? await cookieStore : cookieStore;\n}\n\n/**\n * Link anonymous tracking data to a user after they sign up or log in\n */\nexport async function linkTrackingDataToUser(userId: string): Promise<void> {\n  try {\n    const supabase = await createClient();\n    const cookieStore = await getCookieStore();\n\n    // Get anonymous ID from cookies\n    const anonymousId = cookieStore.get(ANONYMOUS_ID_COOKIE)?.value;\n\n    if (!anonymousId) {\n      return;\n    }\n\n    // Update all tracking data records with this anonymous ID to link to the user\n    await supabase\n      .from(\"tracking_data\")\n      .update({ user_id: userId })\n      .eq(\"anonymous_id\", anonymousId)\n      .is(\"user_id\", null);\n  } catch (error) {\n    console.error(\"Error linking tracking data to user:\", error);\n  }\n}\n\n/**\n * Get the latest tracking data for a user\n */\nexport async function getUserTrackingData(userId: string) {\n  try {\n    const supabase = await createClient();\n\n    const { data, error } = await supabase\n      .from(\"tracking_data\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .order(\"created_at\", { ascending: false })\n      .limit(1)\n      .single();\n\n    if (error) {\n      console.error(\"Error getting user tracking data:\", error);\n      return null;\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"Error getting user tracking data:\", error);\n    return null;\n  }\n}\n\n/**\n * Save UTM data during onboarding\n */\nexport async function saveUTMDataDuringOnboarding(\n  userId: string,\n  onboardingId: string\n): Promise<void> {\n  try {\n    const supabase = await createClient();\n\n    // Get latest tracking data for the user\n    const trackingData = await getUserTrackingData(userId);\n\n    if (!trackingData) return;\n\n    // Update onboarding record with UTM data\n    await supabase\n      .from(\"user_onboarding\")\n      .update({\n        tracking_data_id: trackingData.id,\n        utm_source: trackingData.utm_source,\n        utm_medium: trackingData.utm_medium,\n        utm_campaign: trackingData.utm_campaign,\n        referrer: trackingData.referrer,\n      })\n      .eq(\"id\", onboardingId);\n  } catch (error) {\n    console.error(\"Error saving UTM data during onboarding:\", error);\n  }\n}\n\n/**\n * Get UTM data from cookie on the server\n */\nexport async function getServerUTMData(): Promise<UTMParams | null> {\n  try {\n    const cookieStore = await getCookieStore();\n    const utmData = cookieStore.get(UTM_COOKIE_NAME);\n    return utmData ? JSON.parse(utmData.value) : null;\n  } catch (error) {\n    console.error(\"Error getting server UTM data:\", error);\n    return null;\n  }\n}\n\n/**\n * Get visit data from cookie on the server\n */\nexport async function getServerVisitData(): Promise<{\n  first_visit?: string;\n  referrer?: string;\n  landing_page?: string;\n} | null> {\n  try {\n    const cookieStore = await getCookieStore();\n    const visitData = cookieStore.get(VISIT_COOKIE_NAME);\n    return visitData ? JSON.parse(visitData.value) : null;\n  } catch (error) {\n    console.error(\"Error getting server visit data:\", error);\n    return null;\n  }\n}\n\n/**\n * Get anonymous ID from cookie on the server\n */\nexport async function getServerAnonymousId(): Promise<string | null> {\n  try {\n    const cookieStore = await getCookieStore();\n    const anonymousId = cookieStore.get(ANONYMOUS_ID_COOKIE);\n    return anonymousId ? anonymousId.value : null;\n  } catch (error) {\n    console.error(\"Error getting server anonymous ID:\", error);\n    return null;\n  }\n}\n\n/**\n * Get all tracking data from cookies on the server\n */\nexport async function getServerTrackingData(): Promise<{\n  utmData: UTMParams | null;\n  visitData: {\n    first_visit?: string;\n    referrer?: string;\n    landing_page?: string;\n  } | null;\n  anonymousId: string | null;\n}> {\n  const [utmData, visitData, anonymousId] = await Promise.all([\n    getServerUTMData(),\n    getServerVisitData(),\n    getServerAnonymousId(),\n  ]);\n\n  return {\n    utmData,\n    visitData,\n    anonymousId,\n  };\n}\n\n/**\n * Set UTM data in cookie on the server\n */\nexport async function setServerUTMData(data: UTMParams): Promise<void> {\n  try {\n    const cookieStore = await getCookieStore();\n    cookieStore.set(UTM_COOKIE_NAME, JSON.stringify(data), COOKIE_OPTIONS);\n  } catch (error) {\n    console.error(\"Error setting server UTM data:\", error);\n  }\n}\n\n/**\n * Set visit data in cookie on the server\n */\nexport async function setServerVisitData(data: {\n  first_visit: string;\n  referrer?: string;\n  landing_page: string;\n}): Promise<void> {\n  try {\n    const cookieStore = await getCookieStore();\n    cookieStore.set(VISIT_COOKIE_NAME, JSON.stringify(data), COOKIE_OPTIONS);\n  } catch (error) {\n    console.error(\"Error setting server visit data:\", error);\n  }\n}\n\n/**\n * Set anonymous ID in cookie on the server\n */\nexport async function setServerAnonymousId(id: string): Promise<void> {\n  try {\n    const cookieStore = await getCookieStore();\n    cookieStore.set(ANONYMOUS_ID_COOKIE, id, {\n      ...COOKIE_OPTIONS,\n      expires: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year\n    });\n  } catch (error) {\n    console.error(\"Error setting server anonymous ID:\", error);\n  }\n}\n\n/**\n * Clear all tracking cookies on the server\n */\nexport async function clearServerTrackingCookies(): Promise<void> {\n  try {\n    const cookieStore = await getCookieStore();\n    cookieStore.delete(UTM_COOKIE_NAME);\n    cookieStore.delete(VISIT_COOKIE_NAME);\n    cookieStore.delete(ANONYMOUS_ID_COOKIE);\n  } catch (error) {\n    console.error(\"Error clearing server tracking cookies:\", error);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;IAwBsB;IA0BA;IA2BA;IA+BA;IAcA;IAkBA;IAcA;IAyBA;IAYA;IAgBA;IAeA","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/maryniukk/Documents/Work/arti-notes-v2-main/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,+MAI2C,EAC7CA,qBAAqB","ignoreList":[0],"debugId":null}}]
}