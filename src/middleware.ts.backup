import { NextResponse, type NextRequest } from "next/server";
import { createClient } from "./utils/supabase/server";

// Route constants
const ROUTES = {
  LOGIN: "/login",
  SIGNUP: "/sign-up",
  PAYMENT: "/payment",
  ONBOARDING: "/onboarding",
  DASHBOARD: "/dashboard",
} as const;

export async function middleware(request: NextRequest) {
  try {
    const currentPath = request.nextUrl.pathname;

    console.log("=== MIDDLEWARE START ===", {
      pathname: currentPath,
      timestamp: new Date().toISOString(),
    });

    // Skip middleware for static files, API routes, and auth callback
    if (
      currentPath.startsWith("/_next") ||
      currentPath.startsWith("/api") ||
      currentPath.startsWith("/auth/callback") ||
      currentPath === "/session-debug" || // Allow session debug page
      currentPath.includes(".")
    ) {
      console.log("Skipping middleware for:", currentPath);
      return NextResponse.next();
    }

    const response = NextResponse.next({
      request: {
        headers: request.headers,
      },
    });

    // Initialize Supabase client
    const supabase = await createClient();

    const {
      data: { user },
      error: userError,
    } = await supabase.auth.getUser();

    console.log("=== USER CHECK ===", {
      hasUser: !!user,
      userId: user?.id,
      userEmail: user?.email,
      emailConfirmed: user?.email_confirmed_at,
      userError: userError?.message,
    });

    // Define route categories
    const isAuthRoute = [
      ROUTES.LOGIN,
      ROUTES.SIGNUP,
      ROUTES.PAYMENT,
      ROUTES.ONBOARDING,
    ].includes(currentPath as any);
    const isDashboard = currentPath.startsWith(ROUTES.DASHBOARD);
    const isHomePage = currentPath === "/";

    // No user - redirect to signup (except if already on auth routes)
    if (!user) {
      if (isDashboard || isHomePage) {
        console.log("No user, redirecting to signup");
        return NextResponse.redirect(new URL(ROUTES.SIGNUP, request.url));
      }
      console.log("No user, but on auth route - allowing");
      return response;
    }

    // User exists but email not confirmed (shouldn't happen with disabled confirmation, but just in case)
    if (!user.email_confirmed_at) {
      console.log("User email not confirmed");
      if (isDashboard) {
        return NextResponse.redirect(new URL(ROUTES.SIGNUP, request.url));
      }
      return response;
    }

    // User exists and email confirmed - check onboarding status
    console.log("=== CHECKING ONBOARDING STATUS ===");

    const { data: onboardingData, error: onboardingError } = await supabase
      .from("user_onboarding")
      .select("payment_completed, completed_at")
      .eq("user_id", user.id)
      .maybeSingle();

    if (onboardingError && onboardingError.code !== "PGRST116") {
      console.error("Error fetching onboarding data:", onboardingError);
    }

    const hasCompletedPayment = onboardingData?.payment_completed || false;
    const hasCompletedOnboarding =
      onboardingData?.completed_at !== null && onboardingData !== null;

    console.log("=== USER STATUS ===", {
      hasCompletedPayment,
      hasCompletedOnboarding,
      currentPath,
      onboardingData,
    });

    // CRITICAL: Prevent redirect loops by being very specific about when to redirect

    if (hasCompletedPayment && hasCompletedOnboarding) {
      // User is fully complete - only redirect auth routes to dashboard
      if (isAuthRoute) {
        console.log("Complete user on auth route, redirecting to dashboard");
        return NextResponse.redirect(new URL(ROUTES.DASHBOARD, request.url));
      }
    } else if (hasCompletedPayment && !hasCompletedOnboarding) {
      // Payment complete, needs onboarding - only redirect if NOT on onboarding page
      if (currentPath !== ROUTES.ONBOARDING) {
        console.log("Payment complete, redirecting to onboarding");
        return NextResponse.redirect(new URL(ROUTES.ONBOARDING, request.url));
      }
    } else {
      // No payment completed yet - redirect to payment BUT...
      // IMPORTANT: Don't redirect if already on payment page or signup/login pages
      if (
        currentPath !== ROUTES.PAYMENT &&
        currentPath !== ROUTES.LOGIN &&
        currentPath !== ROUTES.SIGNUP
      ) {
        console.log("No payment, redirecting to payment");
        return NextResponse.redirect(new URL(ROUTES.PAYMENT, request.url));
      }

      // Special case: if user is on signup page but they already exist, redirect to payment
      if (currentPath === ROUTES.SIGNUP) {
        console.log("Existing user on signup page, redirecting to payment");
        return NextResponse.redirect(new URL(ROUTES.PAYMENT, request.url));
      }
    }

    console.log("=== MIDDLEWARE END - NO REDIRECT ===");
    return response;
  } catch (error) {
    console.error("=== MIDDLEWARE ERROR ===", error);
    return NextResponse.next();
  }
}

export const config = {
  matcher: [
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};
